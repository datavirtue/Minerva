package com.datavirtue.nevitiumpro;

import org.junit.Assert;
import org.junit.Test;


import com.datavirtue.nevitiumpro.data.factories.*;
import com.datavirtue.nevitiumpro.data.model.obj.*;
import com.datavirtue.nevitiumpro.data.services.datalayer.DataLayerNevitiumpro;
import com.datavirtue.nevitiumpro.data.services.datalayer.DataLayerNevitiumproImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/applicationContext.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateNevitiumproDaoFactory.getQuoteItemsDao().getQuery("delete from QuoteItems").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getProjectsHasQuotesDao().getQuery("delete from ProjectsHasQuotes").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInvoiceReturnsDao().getQuery("delete from InvoiceReturns").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInvoicePaymentsDao().getQuery("delete from InvoicePayments").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInvoiceItemsDao().getQuery("delete from InvoiceItems").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getUserAccountDao().getQuery("delete from UserAccount").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getQuotesDao().getQuery("delete from Quotes").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getProjectsHasInvoicesDao().getQuery("delete from ProjectsHasInvoices").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getProjectsHasConnectionsDao().getQuery("delete from ProjectsHasConnections").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getProjectsDao().getQuery("delete from Projects").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInvoicesDao().getQuery("delete from Invoices").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInventoryImagesDao().getQuery("delete from InventoryImages").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInventoryHasConnectionsDao().getQuery("delete from InventoryHasConnections").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInventoryDao().getQuery("delete from Inventory").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getDebitAccountsDao().getQuery("delete from DebitAccounts").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getDebitAccountLedgerDao().getQuery("delete from DebitAccountLedger").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getCreditAccountsDao().getQuery("delete from CreditAccounts").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getCreditAccountLedgerDao().getQuery("delete from CreditAccountLedger").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getConnectionsShippingDao().getQuery("delete from ConnectionsShipping").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getConnectionsDocumentsDao().getQuery("delete from ConnectionsDocuments").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getConnectionsDao().getQuery("delete from Connections").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}
	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFinalPass() {
	
		HibernateNevitiumproDaoFactory.getQuoteItemsDao().getQuery("delete from QuoteItems").executeUpdate();
		HibernateNevitiumproDaoFactory.getProjectsHasQuotesDao().getQuery("delete from ProjectsHasQuotes").executeUpdate();
		HibernateNevitiumproDaoFactory.getInvoiceReturnsDao().getQuery("delete from InvoiceReturns").executeUpdate();
		HibernateNevitiumproDaoFactory.getInvoicePaymentsDao().getQuery("delete from InvoicePayments").executeUpdate();
		HibernateNevitiumproDaoFactory.getInvoiceItemsDao().getQuery("delete from InvoiceItems").executeUpdate();
		HibernateNevitiumproDaoFactory.getUserAccountDao().getQuery("delete from UserAccount").executeUpdate();
		HibernateNevitiumproDaoFactory.getQuotesDao().getQuery("delete from Quotes").executeUpdate();
		HibernateNevitiumproDaoFactory.getProjectsHasInvoicesDao().getQuery("delete from ProjectsHasInvoices").executeUpdate();
		HibernateNevitiumproDaoFactory.getProjectsHasConnectionsDao().getQuery("delete from ProjectsHasConnections").executeUpdate();
		HibernateNevitiumproDaoFactory.getProjectsDao().getQuery("delete from Projects").executeUpdate();
		HibernateNevitiumproDaoFactory.getInvoicesDao().getQuery("delete from Invoices").executeUpdate();
		HibernateNevitiumproDaoFactory.getInventoryImagesDao().getQuery("delete from InventoryImages").executeUpdate();
		HibernateNevitiumproDaoFactory.getInventoryHasConnectionsDao().getQuery("delete from InventoryHasConnections").executeUpdate();
		HibernateNevitiumproDaoFactory.getInventoryDao().getQuery("delete from Inventory").executeUpdate();
		HibernateNevitiumproDaoFactory.getDebitAccountsDao().getQuery("delete from DebitAccounts").executeUpdate();
		HibernateNevitiumproDaoFactory.getDebitAccountLedgerDao().getQuery("delete from DebitAccountLedger").executeUpdate();
		HibernateNevitiumproDaoFactory.getCreditAccountsDao().getQuery("delete from CreditAccounts").executeUpdate();
		HibernateNevitiumproDaoFactory.getCreditAccountLedgerDao().getQuery("delete from CreditAccountLedger").executeUpdate();
		HibernateNevitiumproDaoFactory.getConnectionsShippingDao().getQuery("delete from ConnectionsShipping").executeUpdate();
		HibernateNevitiumproDaoFactory.getConnectionsDocumentsDao().getQuery("delete from ConnectionsDocuments").executeUpdate();
		HibernateNevitiumproDaoFactory.getConnectionsDao().getQuery("delete from Connections").executeUpdate();


		
	}

	
	/**
	 * Hibernate test case for table: NevitiumPro.connections.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testConnections() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		Connections connections = NevitiumproDataPoolFactory.getConnections();
		dataLayerNevitiumpro.saveOrUpdate(connections);

		Integer connectionsId = connections.getId();
		Connections copy = connections.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(connections); 		 

		connections = dataLayerNevitiumpro.getConnections(connectionsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddress(), connections.getAddress());
		Assert.assertEquals(copy.getAddress2(), connections.getAddress2());
		Assert.assertEquals(copy.getCity(), connections.getCity());
		Assert.assertEquals(copy.getCompanyName(), connections.getCompanyName());
		Assert.assertEquals(copy.getContact(), connections.getContact());
		Assert.assertEquals(copy.getCountryCode(), connections.getCountryCode());
		Assert.assertEquals(copy.isCustomer(), connections.isCustomer());
		Assert.assertEquals(copy.getCustom1(), connections.getCustom1());
		Assert.assertEquals(copy.getCustom2(), connections.getCustom2());
		Assert.assertEquals(copy.getEmail(), connections.getEmail());
		Assert.assertEquals(copy.getFax(), connections.getFax());
		Assert.assertEquals(copy.getFirstName(), connections.getFirstName());
		Assert.assertEquals(copy.getLastName(), connections.getLastName());
		Assert.assertEquals(copy.getLatitude(), connections.getLatitude());
		Assert.assertEquals(copy.getLongitude(), connections.getLongitude());
		Assert.assertEquals(copy.getMobile1(), connections.getMobile1());
		Assert.assertEquals(copy.getMobile2(), connections.getMobile2());
		Assert.assertEquals(copy.getNote(), connections.getNote());
		Assert.assertEquals(copy.getPicture(), connections.getPicture());
		Assert.assertEquals(copy.getPostCode(), connections.getPostCode());
		Assert.assertEquals(copy.getState(), connections.getState());
		Assert.assertEquals(copy.isSupplier(), connections.isSupplier());
		Assert.assertEquals(copy.isTax1(), connections.isTax1());
		Assert.assertEquals(copy.isTax2(), connections.isTax2());
		Assert.assertEquals(copy.getWebsite(), connections.getWebsite());
		// tests for coverage completeness
		Assert.assertFalse(connections.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(connections.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.connections_documents.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testConnectionsDocuments() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		ConnectionsDocuments connectionsDocuments = NevitiumproDataPoolFactory.getConnectionsDocuments();
		dataLayerNevitiumpro.saveOrUpdate(connectionsDocuments);

		Integer connectionsDocumentsId = connectionsDocuments.getId();
		ConnectionsDocuments copy = connectionsDocuments.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(connectionsDocuments); 		 

		connectionsDocuments = dataLayerNevitiumpro.getConnectionsDocuments(connectionsDocumentsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getApplication(), connectionsDocuments.getApplication());
		Assert.assertEquals(copy.getBinDocument(), connectionsDocuments.getBinDocument());
		Assert.assertEquals(copy.getConnectionsConnections().getId(), connectionsDocuments.getConnectionsConnections().getId());
		Assert.assertEquals(copy.getDate(), connectionsDocuments.getDate());
		Assert.assertEquals(copy.getSubject(), connectionsDocuments.getSubject());
		Assert.assertEquals(copy.getTextDocument(), connectionsDocuments.getTextDocument());
		Assert.assertEquals(copy.getType(), connectionsDocuments.getType());
		// tests for coverage completeness
		Assert.assertFalse(connectionsDocuments.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(connectionsDocuments.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.connections_shipping.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testConnectionsShipping() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		ConnectionsShipping connectionsShipping = NevitiumproDataPoolFactory.getConnectionsShipping();
		dataLayerNevitiumpro.saveOrUpdate(connectionsShipping);

		Integer connectionsShippingId = connectionsShipping.getId();
		ConnectionsShipping copy = connectionsShipping.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(connectionsShipping); 		 

		connectionsShipping = dataLayerNevitiumpro.getConnectionsShipping(connectionsShippingId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddress(), connectionsShipping.getAddress());
		Assert.assertEquals(copy.getAddress2(), connectionsShipping.getAddress2());
		Assert.assertEquals(copy.getAttn(), connectionsShipping.getAttn());
		Assert.assertEquals(copy.getCity(), connectionsShipping.getCity());
		Assert.assertEquals(copy.getConnectionsConnections().getId(), connectionsShipping.getConnectionsConnections().getId());
		Assert.assertEquals(copy.getCountryCode(), connectionsShipping.getCountryCode());
		Assert.assertEquals(copy.getCustom1(), connectionsShipping.getCustom1());
		Assert.assertEquals(copy.getCustom2(), connectionsShipping.getCustom2());
		Assert.assertEquals(copy.isDefaultShippingAddress(), connectionsShipping.isDefaultShippingAddress());
		Assert.assertEquals(copy.getEmail(), connectionsShipping.getEmail());
		Assert.assertEquals(copy.getFax(), connectionsShipping.getFax());
		Assert.assertEquals(copy.getLatitude(), connectionsShipping.getLatitude());
		Assert.assertEquals(copy.getLocationName(), connectionsShipping.getLocationName());
		Assert.assertEquals(copy.getLongitude(), connectionsShipping.getLongitude());
		Assert.assertEquals(copy.getMobile1(), connectionsShipping.getMobile1());
		Assert.assertEquals(copy.getMobile2(), connectionsShipping.getMobile2());
		Assert.assertEquals(copy.getNote(), connectionsShipping.getNote());
		Assert.assertEquals(copy.getPostCode(), connectionsShipping.getPostCode());
		Assert.assertEquals(copy.getState(), connectionsShipping.getState());
		Assert.assertEquals(copy.getWebsite(), connectionsShipping.getWebsite());
		// tests for coverage completeness
		Assert.assertFalse(connectionsShipping.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(connectionsShipping.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.credit_account_ledger.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testCreditAccountLedger() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		CreditAccountLedger creditAccountLedger = NevitiumproDataPoolFactory.getCreditAccountLedger();
		dataLayerNevitiumpro.saveOrUpdate(creditAccountLedger);

		Integer creditAccountLedgerId = creditAccountLedger.getId();
		CreditAccountLedger copy = creditAccountLedger.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(creditAccountLedger); 		 

		creditAccountLedger = dataLayerNevitiumpro.getCreditAccountLedger(creditAccountLedgerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCredit(), creditAccountLedger.getCredit());
		Assert.assertEquals(copy.getCreditLimit(), creditAccountLedger.getCreditLimit());
		Assert.assertEquals(copy.getDate(), creditAccountLedger.getDate());
		Assert.assertEquals(copy.getDebit(), creditAccountLedger.getDebit());
		Assert.assertEquals(copy.getMemo(), creditAccountLedger.getMemo());
		// tests for coverage completeness
		Assert.assertFalse(creditAccountLedger.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(creditAccountLedger.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.credit_accounts.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testCreditAccounts() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		CreditAccounts creditAccounts = NevitiumproDataPoolFactory.getCreditAccounts();
		dataLayerNevitiumpro.saveOrUpdate(creditAccounts);

		Integer creditAccountsId = creditAccounts.getId();
		CreditAccounts copy = creditAccounts.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(creditAccounts); 		 

		creditAccounts = dataLayerNevitiumpro.getCreditAccounts(creditAccountsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAccountNumber(), creditAccounts.getAccountNumber());
		Assert.assertEquals(copy.getInceptionDate(), creditAccounts.getInceptionDate());
		Assert.assertEquals(copy.getNotes(), creditAccounts.getNotes());
		// tests for coverage completeness
		Assert.assertFalse(creditAccounts.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(creditAccounts.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.debit_account_ledger.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testDebitAccountLedger() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		DebitAccountLedger debitAccountLedger = NevitiumproDataPoolFactory.getDebitAccountLedger();
		dataLayerNevitiumpro.saveOrUpdate(debitAccountLedger);

		Integer debitAccountLedgerId = debitAccountLedger.getId();
		DebitAccountLedger copy = debitAccountLedger.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(debitAccountLedger); 		 

		debitAccountLedger = dataLayerNevitiumpro.getDebitAccountLedger(debitAccountLedgerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCredit(), debitAccountLedger.getCredit());
		Assert.assertEquals(copy.getDate(), debitAccountLedger.getDate());
		Assert.assertEquals(copy.getDebit(), debitAccountLedger.getDebit());
		Assert.assertEquals(copy.getMemo(), debitAccountLedger.getMemo());
		// tests for coverage completeness
		Assert.assertFalse(debitAccountLedger.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(debitAccountLedger.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.debit_accounts.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testDebitAccounts() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		DebitAccounts debitAccounts = NevitiumproDataPoolFactory.getDebitAccounts();
		dataLayerNevitiumpro.saveOrUpdate(debitAccounts);

		Integer debitAccountsId = debitAccounts.getId();
		DebitAccounts copy = debitAccounts.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(debitAccounts); 		 

		debitAccounts = dataLayerNevitiumpro.getDebitAccounts(debitAccountsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAccountNumber(), debitAccounts.getAccountNumber());
		Assert.assertEquals(copy.getInceptionDate(), debitAccounts.getInceptionDate());
		Assert.assertEquals(copy.getNotes(), debitAccounts.getNotes());
		// tests for coverage completeness
		Assert.assertFalse(debitAccounts.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(debitAccounts.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.inventory.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testInventory() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		Inventory inventory = NevitiumproDataPoolFactory.getInventory();
		dataLayerNevitiumpro.saveOrUpdate(inventory);

		Integer inventoryId = inventory.getId();
		Inventory copy = inventory.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(inventory); 		 

		inventory = dataLayerNevitiumpro.getInventory(inventoryId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.isAvailable(), inventory.isAvailable());
		Assert.assertEquals(copy.getCategory(), inventory.getCategory());
		Assert.assertEquals(copy.getCode(), inventory.getCode());
		Assert.assertEquals(copy.getCost(), inventory.getCost());
		Assert.assertEquals(copy.getCutoff(), inventory.getCutoff(), 0.1);
		Assert.assertEquals(copy.getDescription(), inventory.getDescription());
		Assert.assertEquals(copy.getLastReceived(), inventory.getLastReceived());
		Assert.assertEquals(copy.getLastSale(), inventory.getLastSale());
		Assert.assertEquals(copy.getOnhand(), inventory.getOnhand(), 0.1);
		Assert.assertEquals(copy.isPartialQtyAllowed(), inventory.isPartialQtyAllowed());
		Assert.assertEquals(copy.getPrice(), inventory.getPrice());
		Assert.assertEquals(copy.getSize(), inventory.getSize());
		Assert.assertEquals(copy.isTax1(), inventory.isTax1());
		Assert.assertEquals(copy.isTax2(), inventory.isTax2());
		Assert.assertEquals(copy.getUpc(), inventory.getUpc());
		Assert.assertEquals(copy.getWeight(), inventory.getWeight());
		// tests for coverage completeness
		Assert.assertFalse(inventory.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(inventory.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.inventory_has_connections.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testInventoryHasConnections() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		InventoryHasConnections inventoryHasConnections = NevitiumproDataPoolFactory.getInventoryHasConnections();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.datavirtue.nevitiumpro.data.factories.HibernateNevitiumproDaoFactory.getConnectionsDao().saveOrUpdate(((com.datavirtue.nevitiumpro.data.model.obj.InventoryHasConnectionsPK)inventoryHasConnections.getId()).getConnectionsConnections());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.datavirtue.nevitiumpro.data.factories.HibernateNevitiumproDaoFactory.getInventoryDao().saveOrUpdate(((com.datavirtue.nevitiumpro.data.model.obj.InventoryHasConnectionsPK)inventoryHasConnections.getId()).getInventoryInventory());
		dataLayerNevitiumpro.saveOrUpdate(inventoryHasConnections);

		InventoryHasConnectionsPK inventoryHasConnectionsId = inventoryHasConnections.getId();
		InventoryHasConnections copy = inventoryHasConnections.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(inventoryHasConnections); 		 

		inventoryHasConnections = dataLayerNevitiumpro.getInventoryHasConnections(inventoryHasConnectionsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), inventoryHasConnections.getId());
		// tests for coverage completeness
		Assert.assertFalse(inventoryHasConnections.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(inventoryHasConnections.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.inventory_images.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testInventoryImages() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		InventoryImages inventoryImages = NevitiumproDataPoolFactory.getInventoryImages();
		dataLayerNevitiumpro.saveOrUpdate(inventoryImages);

		Integer inventoryImagesId = inventoryImages.getId();
		InventoryImages copy = inventoryImages.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(inventoryImages); 		 

		inventoryImages = dataLayerNevitiumpro.getInventoryImages(inventoryImagesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getBitmap(), inventoryImages.getBitmap());
		Assert.assertEquals(copy.getDate(), inventoryImages.getDate());
		Assert.assertEquals(copy.getImageFormat(), inventoryImages.getImageFormat());
		Assert.assertEquals(copy.getImageUrl(), inventoryImages.getImageUrl());
		Assert.assertEquals(copy.getInventoryInventory().getId(), inventoryImages.getInventoryInventory().getId());
		Assert.assertEquals(copy.getTitle(), inventoryImages.getTitle());
		// tests for coverage completeness
		Assert.assertFalse(inventoryImages.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(inventoryImages.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.invoice_items.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testInvoiceItems() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		InvoiceItems invoiceItems = NevitiumproDataPoolFactory.getInvoiceItems();
		dataLayerNevitiumpro.saveOrUpdate(invoiceItems);

		Integer invoiceItemsId = invoiceItems.getId();
		InvoiceItems copy = invoiceItems.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(invoiceItems); 		 

		invoiceItems = dataLayerNevitiumpro.getInvoiceItems(invoiceItemsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCode(), invoiceItems.getCode());
		Assert.assertEquals(copy.getCost(), invoiceItems.getCost());
		Assert.assertEquals(copy.getDate(), invoiceItems.getDate());
		Assert.assertEquals(copy.getDescription(), invoiceItems.getDescription());
		Assert.assertEquals(copy.getInvoicesInvoices().getId(), invoiceItems.getInvoicesInvoices().getId());
		Assert.assertEquals(copy.getQtySold(), invoiceItems.getQtySold());
		Assert.assertEquals(copy.isTax1(), invoiceItems.isTax1());
		Assert.assertEquals(copy.isTax2(), invoiceItems.isTax2());
		Assert.assertEquals(copy.getUnitPrice(), invoiceItems.getUnitPrice());
		// tests for coverage completeness
		Assert.assertFalse(invoiceItems.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(invoiceItems.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.invoice_payments.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testInvoicePayments() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		InvoicePayments invoicePayments = NevitiumproDataPoolFactory.getInvoicePayments();
		dataLayerNevitiumpro.saveOrUpdate(invoicePayments);

		Integer invoicePaymentsId = invoicePayments.getId();
		InvoicePayments copy = invoicePayments.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(invoicePayments); 		 

		invoicePayments = dataLayerNevitiumpro.getInvoicePayments(invoicePaymentsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCredit(), invoicePayments.getCredit());
		Assert.assertEquals(copy.getDate(), invoicePayments.getDate());
		Assert.assertEquals(copy.getDebit(), invoicePayments.getDebit());
		Assert.assertEquals(copy.getInvoicesInvoices().getId(), invoicePayments.getInvoicesInvoices().getId());
		Assert.assertEquals(copy.getMemo(), invoicePayments.getMemo());
		Assert.assertEquals(copy.getType(), invoicePayments.getType());
		// tests for coverage completeness
		Assert.assertFalse(invoicePayments.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(invoicePayments.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.invoice_returns.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testInvoiceReturns() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		InvoiceReturns invoiceReturns = NevitiumproDataPoolFactory.getInvoiceReturns();
		dataLayerNevitiumpro.saveOrUpdate(invoiceReturns);

		Integer invoiceReturnsId = invoiceReturns.getId();
		InvoiceReturns copy = invoiceReturns.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(invoiceReturns); 		 

		invoiceReturns = dataLayerNevitiumpro.getInvoiceReturns(invoiceReturnsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCode(), invoiceReturns.getCode());
		Assert.assertEquals(copy.getCredit(), invoiceReturns.getCredit());
		Assert.assertEquals(copy.getDate(), invoiceReturns.getDate());
		Assert.assertEquals(copy.getDescription(), invoiceReturns.getDescription());
		Assert.assertEquals(copy.getInvoicesInvoices().getId(), invoiceReturns.getInvoicesInvoices().getId());
		Assert.assertEquals(copy.getQtyReturned(), invoiceReturns.getQtyReturned());
		// tests for coverage completeness
		Assert.assertFalse(invoiceReturns.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(invoiceReturns.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.invoices.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testInvoices() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		Invoices invoices = NevitiumproDataPoolFactory.getInvoices();
		dataLayerNevitiumpro.saveOrUpdate(invoices);

		Integer invoicesId = invoices.getId();
		Invoices copy = invoices.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(invoices); 		 

		invoices = dataLayerNevitiumpro.getInvoices(invoicesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getConnectionsConnections().getId(), invoices.getConnectionsConnections().getId());
		Assert.assertEquals(copy.getCustomer(), invoices.getCustomer());
		Assert.assertEquals(copy.getDate(), invoices.getDate());
		Assert.assertEquals(copy.getInvoiceNumber(), invoices.getInvoiceNumber());
		Assert.assertEquals(copy.getMessage(), invoices.getMessage());
		Assert.assertEquals(copy.isPaid(), invoices.isPaid());
		Assert.assertEquals(copy.getQuoteId(), invoices.getQuoteId());
		Assert.assertEquals(copy.getTax1(), invoices.getTax1());
		Assert.assertEquals(copy.getTax2(), invoices.getTax2());
		Assert.assertEquals(copy.isVoided(), invoices.isVoided());
		// tests for coverage completeness
		Assert.assertFalse(invoices.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(invoices.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.projects.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testProjects() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		Projects projects = NevitiumproDataPoolFactory.getProjects();
		dataLayerNevitiumpro.saveOrUpdate(projects);

		Integer projectsId = projects.getId();
		Projects copy = projects.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(projects); 		 

		projects = dataLayerNevitiumpro.getProjects(projectsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActualEndDate(), projects.getActualEndDate());
		Assert.assertEquals(copy.getMission(), projects.getMission());
		Assert.assertEquals(copy.getNotes(), projects.getNotes());
		Assert.assertEquals(copy.getStartDate(), projects.getStartDate());
		Assert.assertEquals(copy.getTargetDate(), projects.getTargetDate());
		Assert.assertEquals(copy.getTitle(), projects.getTitle());
		// tests for coverage completeness
		Assert.assertFalse(projects.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(projects.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.projects_has_connections.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testProjectsHasConnections() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		ProjectsHasConnections projectsHasConnections = NevitiumproDataPoolFactory.getProjectsHasConnections();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.datavirtue.nevitiumpro.data.factories.HibernateNevitiumproDaoFactory.getConnectionsDao().saveOrUpdate(((com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasConnectionsPK)projectsHasConnections.getId()).getConnectionsConnections());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.datavirtue.nevitiumpro.data.factories.HibernateNevitiumproDaoFactory.getProjectsDao().saveOrUpdate(((com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasConnectionsPK)projectsHasConnections.getId()).getProjectsProjects());
		dataLayerNevitiumpro.saveOrUpdate(projectsHasConnections);

		ProjectsHasConnectionsPK projectsHasConnectionsId = projectsHasConnections.getId();
		ProjectsHasConnections copy = projectsHasConnections.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(projectsHasConnections); 		 

		projectsHasConnections = dataLayerNevitiumpro.getProjectsHasConnections(projectsHasConnectionsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), projectsHasConnections.getId());
		// tests for coverage completeness
		Assert.assertFalse(projectsHasConnections.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(projectsHasConnections.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.projects_has_invoices.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testProjectsHasInvoices() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		ProjectsHasInvoices projectsHasInvoices = NevitiumproDataPoolFactory.getProjectsHasInvoices();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.datavirtue.nevitiumpro.data.factories.HibernateNevitiumproDaoFactory.getInvoicesDao().saveOrUpdate(((com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasInvoicesPK)projectsHasInvoices.getId()).getInvoicesInvoices());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.datavirtue.nevitiumpro.data.factories.HibernateNevitiumproDaoFactory.getProjectsDao().saveOrUpdate(((com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasInvoicesPK)projectsHasInvoices.getId()).getProjectsProjects());
		dataLayerNevitiumpro.saveOrUpdate(projectsHasInvoices);

		ProjectsHasInvoicesPK projectsHasInvoicesId = projectsHasInvoices.getId();
		ProjectsHasInvoices copy = projectsHasInvoices.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(projectsHasInvoices); 		 

		projectsHasInvoices = dataLayerNevitiumpro.getProjectsHasInvoices(projectsHasInvoicesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), projectsHasInvoices.getId());
		// tests for coverage completeness
		Assert.assertFalse(projectsHasInvoices.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(projectsHasInvoices.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.projects_has_quotes.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testProjectsHasQuotes() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		ProjectsHasQuotes projectsHasQuotes = NevitiumproDataPoolFactory.getProjectsHasQuotes();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.datavirtue.nevitiumpro.data.factories.HibernateNevitiumproDaoFactory.getProjectsDao().saveOrUpdate(((com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasQuotesPK)projectsHasQuotes.getId()).getProjectsProjects());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.datavirtue.nevitiumpro.data.factories.HibernateNevitiumproDaoFactory.getQuotesDao().saveOrUpdate(((com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasQuotesPK)projectsHasQuotes.getId()).getQuotesQuotes());
		dataLayerNevitiumpro.saveOrUpdate(projectsHasQuotes);

		ProjectsHasQuotesPK projectsHasQuotesId = projectsHasQuotes.getId();
		ProjectsHasQuotes copy = projectsHasQuotes.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(projectsHasQuotes); 		 

		projectsHasQuotes = dataLayerNevitiumpro.getProjectsHasQuotes(projectsHasQuotesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), projectsHasQuotes.getId());
		// tests for coverage completeness
		Assert.assertFalse(projectsHasQuotes.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(projectsHasQuotes.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.quote_items.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testQuoteItems() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		QuoteItems quoteItems = NevitiumproDataPoolFactory.getQuoteItems();
		dataLayerNevitiumpro.saveOrUpdate(quoteItems);

		Integer quoteItemsId = quoteItems.getId();
		QuoteItems copy = quoteItems.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(quoteItems); 		 

		quoteItems = dataLayerNevitiumpro.getQuoteItems(quoteItemsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCode(), quoteItems.getCode());
		Assert.assertEquals(copy.getCost(), quoteItems.getCost());
		Assert.assertEquals(copy.getDate(), quoteItems.getDate());
		Assert.assertEquals(copy.getDescription(), quoteItems.getDescription());
		Assert.assertEquals(copy.getQtySold(), quoteItems.getQtySold());
		Assert.assertEquals(copy.getQuotesQuotes().getId(), quoteItems.getQuotesQuotes().getId());
		Assert.assertEquals(copy.isTax1(), quoteItems.isTax1());
		Assert.assertEquals(copy.isTax2(), quoteItems.isTax2());
		Assert.assertEquals(copy.getUnitPrice(), quoteItems.getUnitPrice());
		// tests for coverage completeness
		Assert.assertFalse(quoteItems.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(quoteItems.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.quotes.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testQuotes() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		Quotes quotes = NevitiumproDataPoolFactory.getQuotes();
		dataLayerNevitiumpro.saveOrUpdate(quotes);

		Integer quotesId = quotes.getId();
		Quotes copy = quotes.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(quotes); 		 

		quotes = dataLayerNevitiumpro.getQuotes(quotesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getConnectionsConnections().getId(), quotes.getConnectionsConnections().getId());
		Assert.assertEquals(copy.getCustomer(), quotes.getCustomer());
		Assert.assertEquals(copy.getDate(), quotes.getDate());
		Assert.assertEquals(copy.getInvoiceNumber(), quotes.getInvoiceNumber());
		Assert.assertEquals(copy.getMessage(), quotes.getMessage());
		Assert.assertEquals(copy.getTax1(), quotes.getTax1());
		Assert.assertEquals(copy.getTax2(), quotes.getTax2());
		// tests for coverage completeness
		Assert.assertFalse(quotes.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(quotes.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: NevitiumPro.user_accounts.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testUserAccount() throws CloneNotSupportedException {

	 	DataLayerNevitiumpro dataLayerNevitiumpro = DataLayerNevitiumproImpl.getInstance();
		UserAccount UserAccount = NevitiumproDataPoolFactory.getUserAccount();
		dataLayerNevitiumpro.saveOrUpdate(UserAccount);

		Integer UserAccountId = UserAccount.getId();
		UserAccount copy = UserAccount.clone();
		dataLayerNevitiumpro.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerNevitiumpro.evict(UserAccount); 		 

		UserAccount = dataLayerNevitiumpro.getUserAccount(UserAccountId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getChecks(), UserAccount.getChecks());
		Assert.assertEquals(copy.getConnections(), UserAccount.getConnections());
		Assert.assertEquals(copy.getExports(), UserAccount.getExports());
		Assert.assertEquals(copy.getInventory(), UserAccount.getInventory());
		Assert.assertEquals(copy.getInvoices(), UserAccount.getInvoices());
		Assert.assertEquals(copy.getInvoiceManager(), UserAccount.getInvoiceManager());
		Assert.assertEquals(copy.isMaster(), UserAccount.isMaster());
		Assert.assertEquals(copy.getPassword(), UserAccount.getPassword());
		Assert.assertEquals(copy.getQuotes(), UserAccount.getQuotes());
		Assert.assertEquals(copy.getReports(), UserAccount.getReports());
		Assert.assertEquals(copy.getSettings(), UserAccount.getSettings());
		Assert.assertEquals(copy.getUsername(), UserAccount.getUsername());
		// tests for coverage completeness
		Assert.assertFalse(UserAccount.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(UserAccount.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPostCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateNevitiumproDaoFactory.getQuoteItemsDao().getQuery("delete from QuoteItems").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getProjectsHasQuotesDao().getQuery("delete from ProjectsHasQuotes").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInvoiceReturnsDao().getQuery("delete from InvoiceReturns").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInvoicePaymentsDao().getQuery("delete from InvoicePayments").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInvoiceItemsDao().getQuery("delete from InvoiceItems").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getUserAccountDao().getQuery("delete from UserAccount").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getQuotesDao().getQuery("delete from Quotes").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getProjectsHasInvoicesDao().getQuery("delete from ProjectsHasInvoices").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getProjectsHasConnectionsDao().getQuery("delete from ProjectsHasConnections").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getProjectsDao().getQuery("delete from Projects").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInvoicesDao().getQuery("delete from Invoices").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInventoryImagesDao().getQuery("delete from InventoryImages").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInventoryHasConnectionsDao().getQuery("delete from InventoryHasConnections").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getInventoryDao().getQuery("delete from Inventory").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getDebitAccountsDao().getQuery("delete from DebitAccounts").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getDebitAccountLedgerDao().getQuery("delete from DebitAccountLedger").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getCreditAccountsDao().getQuery("delete from CreditAccounts").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getCreditAccountLedgerDao().getQuery("delete from CreditAccountLedger").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getConnectionsShippingDao().getQuery("delete from ConnectionsShipping").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getConnectionsDocumentsDao().getQuery("delete from ConnectionsDocuments").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateNevitiumproDaoFactory.getConnectionsDao().getQuery("delete from Connections").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void postCleanDBFinalPass() {
	
		HibernateNevitiumproDaoFactory.getQuoteItemsDao().getQuery("delete from QuoteItems").executeUpdate();
		HibernateNevitiumproDaoFactory.getProjectsHasQuotesDao().getQuery("delete from ProjectsHasQuotes").executeUpdate();
		HibernateNevitiumproDaoFactory.getInvoiceReturnsDao().getQuery("delete from InvoiceReturns").executeUpdate();
		HibernateNevitiumproDaoFactory.getInvoicePaymentsDao().getQuery("delete from InvoicePayments").executeUpdate();
		HibernateNevitiumproDaoFactory.getInvoiceItemsDao().getQuery("delete from InvoiceItems").executeUpdate();
		HibernateNevitiumproDaoFactory.getUserAccountDao().getQuery("delete from UserAccount").executeUpdate();
		HibernateNevitiumproDaoFactory.getQuotesDao().getQuery("delete from Quotes").executeUpdate();
		HibernateNevitiumproDaoFactory.getProjectsHasInvoicesDao().getQuery("delete from ProjectsHasInvoices").executeUpdate();
		HibernateNevitiumproDaoFactory.getProjectsHasConnectionsDao().getQuery("delete from ProjectsHasConnections").executeUpdate();
		HibernateNevitiumproDaoFactory.getProjectsDao().getQuery("delete from Projects").executeUpdate();
		HibernateNevitiumproDaoFactory.getInvoicesDao().getQuery("delete from Invoices").executeUpdate();
		HibernateNevitiumproDaoFactory.getInventoryImagesDao().getQuery("delete from InventoryImages").executeUpdate();
		HibernateNevitiumproDaoFactory.getInventoryHasConnectionsDao().getQuery("delete from InventoryHasConnections").executeUpdate();
		HibernateNevitiumproDaoFactory.getInventoryDao().getQuery("delete from Inventory").executeUpdate();
		HibernateNevitiumproDaoFactory.getDebitAccountsDao().getQuery("delete from DebitAccounts").executeUpdate();
		HibernateNevitiumproDaoFactory.getDebitAccountLedgerDao().getQuery("delete from DebitAccountLedger").executeUpdate();
		HibernateNevitiumproDaoFactory.getCreditAccountsDao().getQuery("delete from CreditAccounts").executeUpdate();
		HibernateNevitiumproDaoFactory.getCreditAccountLedgerDao().getQuery("delete from CreditAccountLedger").executeUpdate();
		HibernateNevitiumproDaoFactory.getConnectionsShippingDao().getQuery("delete from ConnectionsShipping").executeUpdate();
		HibernateNevitiumproDaoFactory.getConnectionsDocumentsDao().getQuery("delete from ConnectionsDocuments").executeUpdate();
		HibernateNevitiumproDaoFactory.getConnectionsDao().getQuery("delete from Connections").executeUpdate();


		
	}

}

