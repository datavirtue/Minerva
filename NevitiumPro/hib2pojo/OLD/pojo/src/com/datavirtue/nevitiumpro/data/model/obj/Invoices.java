package com.datavirtue.nevitiumpro.data.model.obj;

import com.datavirtue.nevitiumpro.data.model.obj.IInvoices;
import com.datavirtue.nevitiumpro.data.model.obj.InvoiceItems;
import com.datavirtue.nevitiumpro.data.model.obj.InvoicePayments;
import com.datavirtue.nevitiumpro.data.model.obj.InvoiceReturns;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasInvoices;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: invoices.
 * @author autogenerated
 */

@Entity
@Table(name = "invoices", catalog = "NevitiumPro")
public class Invoices implements Cloneable, Serializable, IPojoGenEntity, IInvoices {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559029498L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Connections connectionsConnections;
	/** Field mapping. */
	private String customer;
	/** Field mapping. */
	private Long date;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private Set<InvoiceItems> invoiceItemss = new HashSet<InvoiceItems>();

	/** Field mapping. */
	private Set<InvoicePayments> invoicePaymentss = new HashSet<InvoicePayments>();

	/** Field mapping. */
	private Set<InvoiceReturns> invoiceReturnss = new HashSet<InvoiceReturns>();

	/** Field mapping. */
	private String invoiceNumber;
	/** Field mapping. */
	private String message;
	/** Field mapping. */
	private Boolean paid;
	/** Field mapping. */
	private Set<ProjectsHasInvoices> projectsHasInvoiceses = new HashSet<ProjectsHasInvoices>();

	/** Field mapping. */
	private Integer quoteId;
	/** Field mapping. */
	private java.math.BigDecimal tax1;
	/** Field mapping. */
	private java.math.BigDecimal tax2;
	/** Field mapping. */
	private Boolean voided;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Invoices() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Invoices(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param connectionsConnections Connections object;
	 * @param id Integer object;
	 */
	public Invoices(Connections connectionsConnections, Integer id) {

		this.connectionsConnections = connectionsConnections;
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Invoices.class;
	}
 

    /**
     * Return the value associated with the column: connectionsConnections.
	 * @return A Connections object (this.connectionsConnections)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "CONNECTIONS_CONNECTIONS_ID", nullable = false )
	public Connections getConnectionsConnections() {
		return this.connectionsConnections;
		
	}
	

  
    /**  
     * Set the value related to the column: connectionsConnections.
	 * @param connectionsConnections the connectionsConnections value you wish to set
	 */
	public void setConnectionsConnections(final Connections connectionsConnections) {
		this.connectionsConnections = connectionsConnections;
	}

    /**
     * Return the value associated with the column: customer.
	 * @return A String object (this.customer)
	 */
	@Basic( optional = true )
	@Column( length = 200  )
	public String getCustomer() {
		return this.customer;
		
	}
	

  
    /**  
     * Set the value related to the column: customer.
	 * @param customer the customer value you wish to set
	 */
	public void setCustomer(final String customer) {
		this.customer = customer;
	}

    /**
     * Return the value associated with the column: date.
	 * @return A Long object (this.date)
	 */
	public Long getDate() {
		return this.date;
		
	}
	

  
    /**  
     * Set the value related to the column: date.
	 * @param date the date value you wish to set
	 */
	public void setDate(final Long date) {
		this.date = date;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "invoices_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: invoiceItems.
	 * @return A Set&lt;InvoiceItems&gt; object (this.invoiceItems)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "invoicesInvoices"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "invoices_id", nullable = false  )
	public Set<InvoiceItems> getInvoiceItemss() {
		return this.invoiceItemss;
		
	}
	
	/**
	 * Adds a bi-directional link of type InvoiceItems to the invoiceItemss set.
	 * @param invoiceItems item to add
	 */
	public void addInvoiceItems(InvoiceItems invoiceItems) {
		invoiceItems.setInvoicesInvoices(this);
		this.invoiceItemss.add(invoiceItems);
	}

  
    /**  
     * Set the value related to the column: invoiceItems.
	 * @param invoiceItems the invoiceItems value you wish to set
	 */
	public void setInvoiceItemss(final Set<InvoiceItems> invoiceItems) {
		this.invoiceItemss = invoiceItems;
	}

    /**
     * Return the value associated with the column: invoicePayments.
	 * @return A Set&lt;InvoicePayments&gt; object (this.invoicePayments)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "invoicesInvoices"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "invoices_id", nullable = false  )
	public Set<InvoicePayments> getInvoicePaymentss() {
		return this.invoicePaymentss;
		
	}
	
	/**
	 * Adds a bi-directional link of type InvoicePayments to the invoicePaymentss set.
	 * @param invoicePayments item to add
	 */
	public void addInvoicePayments(InvoicePayments invoicePayments) {
		invoicePayments.setInvoicesInvoices(this);
		this.invoicePaymentss.add(invoicePayments);
	}

  
    /**  
     * Set the value related to the column: invoicePayments.
	 * @param invoicePayments the invoicePayments value you wish to set
	 */
	public void setInvoicePaymentss(final Set<InvoicePayments> invoicePayments) {
		this.invoicePaymentss = invoicePayments;
	}

    /**
     * Return the value associated with the column: invoiceReturns.
	 * @return A Set&lt;InvoiceReturns&gt; object (this.invoiceReturns)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "invoicesInvoices"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "invoices_id", nullable = false  )
	public Set<InvoiceReturns> getInvoiceReturnss() {
		return this.invoiceReturnss;
		
	}
	
	/**
	 * Adds a bi-directional link of type InvoiceReturns to the invoiceReturnss set.
	 * @param invoiceReturns item to add
	 */
	public void addInvoiceReturns(InvoiceReturns invoiceReturns) {
		invoiceReturns.setInvoicesInvoices(this);
		this.invoiceReturnss.add(invoiceReturns);
	}

  
    /**  
     * Set the value related to the column: invoiceReturns.
	 * @param invoiceReturns the invoiceReturns value you wish to set
	 */
	public void setInvoiceReturnss(final Set<InvoiceReturns> invoiceReturns) {
		this.invoiceReturnss = invoiceReturns;
	}

    /**
     * Return the value associated with the column: invoiceNumber.
	 * @return A String object (this.invoiceNumber)
	 */
	@Basic( optional = true )
	@Column( name = "invoice_number", length = 12  )
	public String getInvoiceNumber() {
		return this.invoiceNumber;
		
	}
	

  
    /**  
     * Set the value related to the column: invoiceNumber.
	 * @param invoiceNumber the invoiceNumber value you wish to set
	 */
	public void setInvoiceNumber(final String invoiceNumber) {
		this.invoiceNumber = invoiceNumber;
	}

    /**
     * Return the value associated with the column: message.
	 * @return A String object (this.message)
	 */
	@Basic( optional = true )
	@Column( length = 4000  )
	public String getMessage() {
		return this.message;
		
	}
	

  
    /**  
     * Set the value related to the column: message.
	 * @param message the message value you wish to set
	 */
	public void setMessage(final String message) {
		this.message = message;
	}

    /**
     * Return the value associated with the column: paid.
	 * @return A Boolean object (this.paid)
	 */
	public Boolean isPaid() {
		return this.paid;
		
	}
	

  
    /**  
     * Set the value related to the column: paid.
	 * @param paid the paid value you wish to set
	 */
	public void setPaid(final Boolean paid) {
		this.paid = paid;
	}

    /**
     * Return the value associated with the column: projectsHasInvoices.
	 * @return A Set&lt;ProjectsHasInvoices&gt; object (this.projectsHasInvoices)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.invoicesInvoices"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "invoices_id", nullable = false  )
	public Set<ProjectsHasInvoices> getProjectsHasInvoiceses() {
		return this.projectsHasInvoiceses;
		
	}
	
	/**
	 * Adds a bi-directional link of type ProjectsHasInvoices to the projectsHasInvoiceses set.
	 * @param projectsHasInvoices item to add
	 */
	public void addProjectsHasInvoices(ProjectsHasInvoices projectsHasInvoices) {
		projectsHasInvoices.getId().setInvoicesInvoices(this);
		this.projectsHasInvoiceses.add(projectsHasInvoices);
	}

  
    /**  
     * Set the value related to the column: projectsHasInvoices.
	 * @param projectsHasInvoices the projectsHasInvoices value you wish to set
	 */
	public void setProjectsHasInvoiceses(final Set<ProjectsHasInvoices> projectsHasInvoices) {
		this.projectsHasInvoiceses = projectsHasInvoices;
	}

    /**
     * Return the value associated with the column: quoteId.
	 * @return A Integer object (this.quoteId)
	 */
	@Basic( optional = true )
	@Column( name = "quote_id"  )
	public Integer getQuoteId() {
		return this.quoteId;
		
	}
	

  
    /**  
     * Set the value related to the column: quoteId.
	 * @param quoteId the quoteId value you wish to set
	 */
	public void setQuoteId(final Integer quoteId) {
		this.quoteId = quoteId;
	}

    /**
     * Return the value associated with the column: tax1.
	 * @return A java.math.BigDecimal object (this.tax1)
	 */
	public java.math.BigDecimal getTax1() {
		return this.tax1;
		
	}
	

  
    /**  
     * Set the value related to the column: tax1.
	 * @param tax1 the tax1 value you wish to set
	 */
	public void setTax1(final java.math.BigDecimal tax1) {
		this.tax1 = tax1;
	}

    /**
     * Return the value associated with the column: tax2.
	 * @return A java.math.BigDecimal object (this.tax2)
	 */
	public java.math.BigDecimal getTax2() {
		return this.tax2;
		
	}
	

  
    /**  
     * Set the value related to the column: tax2.
	 * @param tax2 the tax2 value you wish to set
	 */
	public void setTax2(final java.math.BigDecimal tax2) {
		this.tax2 = tax2;
	}

    /**
     * Return the value associated with the column: voided.
	 * @return A Boolean object (this.voided)
	 */
	public Boolean isVoided() {
		return this.voided;
		
	}
	

  
    /**  
     * Set the value related to the column: voided.
	 * @param voided the voided value you wish to set
	 */
	public void setVoided(final Boolean voided) {
		this.voided = voided;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Invoices clone() throws CloneNotSupportedException {
		
        final Invoices copy = (Invoices)super.clone();

		copy.setConnectionsConnections(this.getConnectionsConnections());
		copy.setCustomer(this.getCustomer());
		copy.setDate(this.getDate());
		copy.setId(this.getId());
		if (this.getInvoiceItemss() != null) {
			copy.getInvoiceItemss().addAll(this.getInvoiceItemss());
		}
		if (this.getInvoicePaymentss() != null) {
			copy.getInvoicePaymentss().addAll(this.getInvoicePaymentss());
		}
		if (this.getInvoiceReturnss() != null) {
			copy.getInvoiceReturnss().addAll(this.getInvoiceReturnss());
		}
		copy.setInvoiceNumber(this.getInvoiceNumber());
		copy.setMessage(this.getMessage());
		copy.setPaid(this.isPaid());
		if (this.getProjectsHasInvoiceses() != null) {
			copy.getProjectsHasInvoiceses().addAll(this.getProjectsHasInvoiceses());
		}
		copy.setQuoteId(this.getQuoteId());
		copy.setTax1(this.getTax1());
		copy.setTax2(this.getTax2());
		copy.setVoided(this.isVoided());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("customer: " + this.getCustomer() + ", ");
		sb.append("date: " + this.getDate() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("invoiceNumber: " + this.getInvoiceNumber() + ", ");
		sb.append("message: " + this.getMessage() + ", ");
		sb.append("paid: " + this.isPaid() + ", ");
		sb.append("quoteId: " + this.getQuoteId() + ", ");
		sb.append("tax1: " + this.getTax1() + ", ");
		sb.append("tax2: " + this.getTax2() + ", ");
		sb.append("voided: " + this.isVoided());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Invoices that; 
		try {
			that = (Invoices) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getConnectionsConnections() == null) && (that.getConnectionsConnections() == null)) || (getConnectionsConnections() != null && getConnectionsConnections().getId().equals(that.getConnectionsConnections().getId())));	
		result = result && (((getCustomer() == null) && (that.getCustomer() == null)) || (getCustomer() != null && getCustomer().equals(that.getCustomer())));
		result = result && (((getDate() == null) && (that.getDate() == null)) || (getDate() != null && getDate().equals(that.getDate())));
		result = result && (((getInvoiceNumber() == null) && (that.getInvoiceNumber() == null)) || (getInvoiceNumber() != null && getInvoiceNumber().equals(that.getInvoiceNumber())));
		result = result && (((getMessage() == null) && (that.getMessage() == null)) || (getMessage() != null && getMessage().equals(that.getMessage())));
		result = result && (((isPaid() == null) && (that.isPaid() == null)) || (isPaid() != null && isPaid().equals(that.isPaid())));
		result = result && (((getQuoteId() == null) && (that.getQuoteId() == null)) || (getQuoteId() != null && getQuoteId().equals(that.getQuoteId())));
		result = result && (((getTax1() == null) && (that.getTax1() == null)) || (getTax1() != null && getTax1().equals(that.getTax1())));
		result = result && (((getTax2() == null) && (that.getTax2() == null)) || (getTax2() != null && getTax2().equals(that.getTax2())));
		result = result && (((isVoided() == null) && (that.isVoided() == null)) || (isVoided() != null && isVoided().equals(that.isVoided())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
