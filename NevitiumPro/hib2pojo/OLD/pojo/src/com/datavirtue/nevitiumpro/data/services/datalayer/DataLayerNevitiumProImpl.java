package com.datavirtue.nevitiumpro.data.services.datalayer;

import com.datavirtue.nevitiumpro.data.factories.*;
import com.datavirtue.nevitiumpro.data.model.obj.Connections;
import com.datavirtue.nevitiumpro.data.model.obj.ConnectionsDocuments;
import com.datavirtue.nevitiumpro.data.model.obj.ConnectionsShipping;
import com.datavirtue.nevitiumpro.data.model.obj.CreditAccountLedger;
import com.datavirtue.nevitiumpro.data.model.obj.CreditAccounts;
import com.datavirtue.nevitiumpro.data.model.obj.DebitAccountLedger;
import com.datavirtue.nevitiumpro.data.model.obj.DebitAccounts;
import com.datavirtue.nevitiumpro.data.model.obj.Inventory;
import com.datavirtue.nevitiumpro.data.model.obj.InventoryHasConnections;
import com.datavirtue.nevitiumpro.data.model.obj.InventoryHasConnectionsPK;
import com.datavirtue.nevitiumpro.data.model.obj.InventoryImages;
import com.datavirtue.nevitiumpro.data.model.obj.InvoiceItems;
import com.datavirtue.nevitiumpro.data.model.obj.InvoicePayments;
import com.datavirtue.nevitiumpro.data.model.obj.InvoiceReturns;
import com.datavirtue.nevitiumpro.data.model.obj.Invoices;
import com.datavirtue.nevitiumpro.data.model.obj.Projects;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasConnections;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasConnectionsPK;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasInvoices;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasInvoicesPK;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasQuotes;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasQuotesPK;
import com.datavirtue.nevitiumpro.data.model.obj.QuoteItems;
import com.datavirtue.nevitiumpro.data.model.obj.Quotes;
import com.datavirtue.nevitiumpro.data.model.obj.UserAccount;
import java.io.Serializable;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.ReplicationMode;
import org.hibernate.Session;
import java.util.Collection;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;
import com.felees.hbnpojogen.persistence.GenericDAO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import org.hibernate.proxy.HibernateProxy;
/** 
 * Data layer.
 * @author autogenerated
 */
@org.springframework.stereotype.Component
public class DataLayerNevitiumProImpl implements DataLayerNevitiumPro {
	/** Singleton reference to this class. */
	private static DataLayerNevitiumPro instance;
	/** map lock. */
	private static Object daoMapLock = new Object();

	/** Internal handle. */
	private static Map<Class<?>, GenericDAO<?, ?>> daoMap = null; 
	
		/** Inner handle. */
	private static ApplicationContext context;
 /** Sessionfactory in use. Filled in by Spring. */ 
    private SessionFactory sessionFactory = null;
	
	/** Handle to get back ourselves and perform correct injection. 
	 * @param ctxt filled by spring
	 */
	@Autowired
	public void setApplicationContext(ApplicationContext ctxt) {
		DataLayerNevitiumProImpl.context = ctxt;
	}
	
	
		
 	/**
     * Set session factory.
     * @param sessionFactory sessionfactory to use. 
     */
    @Autowired
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
    
    /** 
	* Returns a DAO instance of the given type.
	* @param <T> Type
	* @param persistentObject to get
	* @return GenericDAO<T, ?> object
     */
    @SuppressWarnings("unchecked")
    private <T> GenericDAO<T, ?> getDAO(final T persistentObject) {
		T persistent = persistentObject;

		synchronized (daoMapLock) {
    		if (daoMap == null) {
    			daoMap = new ConcurrentHashMap<Class<?>, GenericDAO<?, ?>>(); 
	 	   		daoMap.put(Connections.class, HibernateNevitiumproDaoFactory.getConnectionsDao());
	 	   		daoMap.put(ConnectionsDocuments.class, HibernateNevitiumproDaoFactory.getConnectionsDocumentsDao());
	 	   		daoMap.put(ConnectionsShipping.class, HibernateNevitiumproDaoFactory.getConnectionsShippingDao());
	 	   		daoMap.put(CreditAccounts.class, HibernateNevitiumproDaoFactory.getCreditAccountsDao());
	 	   		daoMap.put(CreditAccountLedger.class, HibernateNevitiumproDaoFactory.getCreditAccountLedgerDao());
	 	   		daoMap.put(DebitAccounts.class, HibernateNevitiumproDaoFactory.getDebitAccountsDao());
	 	   		daoMap.put(DebitAccountLedger.class, HibernateNevitiumproDaoFactory.getDebitAccountLedgerDao());
	 	   		daoMap.put(Inventory.class, HibernateNevitiumproDaoFactory.getInventoryDao());
	 	   		daoMap.put(InventoryHasConnections.class, HibernateNevitiumproDaoFactory.getInventoryHasConnectionsDao());
	 	   		daoMap.put(InventoryImages.class, HibernateNevitiumproDaoFactory.getInventoryImagesDao());
	 	   		daoMap.put(Invoices.class, HibernateNevitiumproDaoFactory.getInvoicesDao());
	 	   		daoMap.put(InvoiceItems.class, HibernateNevitiumproDaoFactory.getInvoiceItemsDao());
	 	   		daoMap.put(InvoicePayments.class, HibernateNevitiumproDaoFactory.getInvoicePaymentsDao());
	 	   		daoMap.put(InvoiceReturns.class, HibernateNevitiumproDaoFactory.getInvoiceReturnsDao());
	 	   		daoMap.put(Projects.class, HibernateNevitiumproDaoFactory.getProjectsDao());
	 	   		daoMap.put(ProjectsHasConnections.class, HibernateNevitiumproDaoFactory.getProjectsHasConnectionsDao());
	 	   		daoMap.put(ProjectsHasInvoices.class, HibernateNevitiumproDaoFactory.getProjectsHasInvoicesDao());
	 	   		daoMap.put(ProjectsHasQuotes.class, HibernateNevitiumproDaoFactory.getProjectsHasQuotesDao());
	 	   		daoMap.put(Quotes.class, HibernateNevitiumproDaoFactory.getQuotesDao());
	 	   		daoMap.put(QuoteItems.class, HibernateNevitiumproDaoFactory.getQuoteItemsDao());
	 	   		daoMap.put(UserAccount.class, HibernateNevitiumproDaoFactory.getUserAccountDao());
    		}
		 }
		if (persistentObject instanceof HibernateProxy) {
			persistent = (T) ((HibernateProxy) persistentObject).getHibernateLazyInitializer().getImplementation();
		} 
		
		GenericDAO<T, ?> result = (GenericDAO<T, ?>) daoMap.get(persistent.getClass());
		if (result == null) {
			throw new IllegalAccessError("The given object is of an incorrect type. ");
		}
		return result;
    }

    /**
     * Deletes the given object from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to delete
     */
    public <T> void delete(T persistentObject) {
    	    	getDAO(persistentObject).delete(persistentObject);
    }
    /**
     * Refresh the object $class.className from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to reload
     */
    public <T> void refresh(T persistentObject) {
	    	getDAO(persistentObject).refresh(persistentObject);
    }

    /**
     * Saves the given object to disk.
     * @param persistentObject Object to save
	 * @param <T> A DataLayerObject-derived type
     * @return Identifier of saved object 
     */
    public <T> Serializable save(T persistentObject) {
        return getDAO(persistentObject).save(persistentObject);
    }
    /**
     * Saves or updates the given $class.className object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to save 
     */
    public <T> void saveOrUpdate(T persistentObject) {
        getDAO(persistentObject).saveOrUpdate(persistentObject);
    }
    /**
     * Updates the given object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to update 
     */
    public <T> void update(T persistentObject) {
        getDAO(persistentObject).update(persistentObject);
    }


    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Connections obj) directly
     * @param id Identifier to delete
     */
    public void deleteConnections(final Integer id)  {
        HibernateNevitiumproDaoFactory.getConnectionsDao().delete(loadConnections(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Connections object
     */
    public Connections loadConnections(final Integer id) {
        return HibernateNevitiumproDaoFactory.getConnectionsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Connections getConnections(final Integer id) {
        return HibernateNevitiumproDaoFactory.getConnectionsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ConnectionsDocuments obj) directly
     * @param id Identifier to delete
     */
    public void deleteConnectionsDocuments(final Integer id)  {
        HibernateNevitiumproDaoFactory.getConnectionsDocumentsDao().delete(loadConnectionsDocuments(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ConnectionsDocuments object
     */
    public ConnectionsDocuments loadConnectionsDocuments(final Integer id) {
        return HibernateNevitiumproDaoFactory.getConnectionsDocumentsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public ConnectionsDocuments getConnectionsDocuments(final Integer id) {
        return HibernateNevitiumproDaoFactory.getConnectionsDocumentsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ConnectionsShipping obj) directly
     * @param id Identifier to delete
     */
    public void deleteConnectionsShipping(final Integer id)  {
        HibernateNevitiumproDaoFactory.getConnectionsShippingDao().delete(loadConnectionsShipping(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ConnectionsShipping object
     */
    public ConnectionsShipping loadConnectionsShipping(final Integer id) {
        return HibernateNevitiumproDaoFactory.getConnectionsShippingDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public ConnectionsShipping getConnectionsShipping(final Integer id) {
        return HibernateNevitiumproDaoFactory.getConnectionsShippingDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (CreditAccounts obj) directly
     * @param id Identifier to delete
     */
    public void deleteCreditAccounts(final Integer id)  {
        HibernateNevitiumproDaoFactory.getCreditAccountsDao().delete(loadCreditAccounts(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a CreditAccounts object
     */
    public CreditAccounts loadCreditAccounts(final Integer id) {
        return HibernateNevitiumproDaoFactory.getCreditAccountsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public CreditAccounts getCreditAccounts(final Integer id) {
        return HibernateNevitiumproDaoFactory.getCreditAccountsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (CreditAccountLedger obj) directly
     * @param id Identifier to delete
     */
    public void deleteCreditAccountLedger(final Integer id)  {
        HibernateNevitiumproDaoFactory.getCreditAccountLedgerDao().delete(loadCreditAccountLedger(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a CreditAccountLedger object
     */
    public CreditAccountLedger loadCreditAccountLedger(final Integer id) {
        return HibernateNevitiumproDaoFactory.getCreditAccountLedgerDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public CreditAccountLedger getCreditAccountLedger(final Integer id) {
        return HibernateNevitiumproDaoFactory.getCreditAccountLedgerDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (DebitAccounts obj) directly
     * @param id Identifier to delete
     */
    public void deleteDebitAccounts(final Integer id)  {
        HibernateNevitiumproDaoFactory.getDebitAccountsDao().delete(loadDebitAccounts(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a DebitAccounts object
     */
    public DebitAccounts loadDebitAccounts(final Integer id) {
        return HibernateNevitiumproDaoFactory.getDebitAccountsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public DebitAccounts getDebitAccounts(final Integer id) {
        return HibernateNevitiumproDaoFactory.getDebitAccountsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (DebitAccountLedger obj) directly
     * @param id Identifier to delete
     */
    public void deleteDebitAccountLedger(final Integer id)  {
        HibernateNevitiumproDaoFactory.getDebitAccountLedgerDao().delete(loadDebitAccountLedger(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a DebitAccountLedger object
     */
    public DebitAccountLedger loadDebitAccountLedger(final Integer id) {
        return HibernateNevitiumproDaoFactory.getDebitAccountLedgerDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public DebitAccountLedger getDebitAccountLedger(final Integer id) {
        return HibernateNevitiumproDaoFactory.getDebitAccountLedgerDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Inventory obj) directly
     * @param id Identifier to delete
     */
    public void deleteInventory(final Integer id)  {
        HibernateNevitiumproDaoFactory.getInventoryDao().delete(loadInventory(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Inventory object
     */
    public Inventory loadInventory(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInventoryDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Inventory getInventory(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInventoryDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (InventoryHasConnections obj) directly
     * @param id Identifier to delete
     */
    public void deleteInventoryHasConnections(final InventoryHasConnectionsPK id)  {
        HibernateNevitiumproDaoFactory.getInventoryHasConnectionsDao().delete(loadInventoryHasConnections(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a InventoryHasConnections object
     */
    public InventoryHasConnections loadInventoryHasConnections(final InventoryHasConnectionsPK id) {
        return HibernateNevitiumproDaoFactory.getInventoryHasConnectionsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public InventoryHasConnections getInventoryHasConnections(final InventoryHasConnectionsPK id) {
        return HibernateNevitiumproDaoFactory.getInventoryHasConnectionsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (InventoryImages obj) directly
     * @param id Identifier to delete
     */
    public void deleteInventoryImages(final Integer id)  {
        HibernateNevitiumproDaoFactory.getInventoryImagesDao().delete(loadInventoryImages(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a InventoryImages object
     */
    public InventoryImages loadInventoryImages(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInventoryImagesDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public InventoryImages getInventoryImages(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInventoryImagesDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Invoices obj) directly
     * @param id Identifier to delete
     */
    public void deleteInvoices(final Integer id)  {
        HibernateNevitiumproDaoFactory.getInvoicesDao().delete(loadInvoices(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Invoices object
     */
    public Invoices loadInvoices(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInvoicesDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Invoices getInvoices(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInvoicesDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (InvoiceItems obj) directly
     * @param id Identifier to delete
     */
    public void deleteInvoiceItems(final Integer id)  {
        HibernateNevitiumproDaoFactory.getInvoiceItemsDao().delete(loadInvoiceItems(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a InvoiceItems object
     */
    public InvoiceItems loadInvoiceItems(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInvoiceItemsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public InvoiceItems getInvoiceItems(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInvoiceItemsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (InvoicePayments obj) directly
     * @param id Identifier to delete
     */
    public void deleteInvoicePayments(final Integer id)  {
        HibernateNevitiumproDaoFactory.getInvoicePaymentsDao().delete(loadInvoicePayments(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a InvoicePayments object
     */
    public InvoicePayments loadInvoicePayments(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInvoicePaymentsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public InvoicePayments getInvoicePayments(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInvoicePaymentsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (InvoiceReturns obj) directly
     * @param id Identifier to delete
     */
    public void deleteInvoiceReturns(final Integer id)  {
        HibernateNevitiumproDaoFactory.getInvoiceReturnsDao().delete(loadInvoiceReturns(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a InvoiceReturns object
     */
    public InvoiceReturns loadInvoiceReturns(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInvoiceReturnsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public InvoiceReturns getInvoiceReturns(final Integer id) {
        return HibernateNevitiumproDaoFactory.getInvoiceReturnsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Projects obj) directly
     * @param id Identifier to delete
     */
    public void deleteProjects(final Integer id)  {
        HibernateNevitiumproDaoFactory.getProjectsDao().delete(loadProjects(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Projects object
     */
    public Projects loadProjects(final Integer id) {
        return HibernateNevitiumproDaoFactory.getProjectsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Projects getProjects(final Integer id) {
        return HibernateNevitiumproDaoFactory.getProjectsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ProjectsHasConnections obj) directly
     * @param id Identifier to delete
     */
    public void deleteProjectsHasConnections(final ProjectsHasConnectionsPK id)  {
        HibernateNevitiumproDaoFactory.getProjectsHasConnectionsDao().delete(loadProjectsHasConnections(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ProjectsHasConnections object
     */
    public ProjectsHasConnections loadProjectsHasConnections(final ProjectsHasConnectionsPK id) {
        return HibernateNevitiumproDaoFactory.getProjectsHasConnectionsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public ProjectsHasConnections getProjectsHasConnections(final ProjectsHasConnectionsPK id) {
        return HibernateNevitiumproDaoFactory.getProjectsHasConnectionsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ProjectsHasInvoices obj) directly
     * @param id Identifier to delete
     */
    public void deleteProjectsHasInvoices(final ProjectsHasInvoicesPK id)  {
        HibernateNevitiumproDaoFactory.getProjectsHasInvoicesDao().delete(loadProjectsHasInvoices(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ProjectsHasInvoices object
     */
    public ProjectsHasInvoices loadProjectsHasInvoices(final ProjectsHasInvoicesPK id) {
        return HibernateNevitiumproDaoFactory.getProjectsHasInvoicesDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public ProjectsHasInvoices getProjectsHasInvoices(final ProjectsHasInvoicesPK id) {
        return HibernateNevitiumproDaoFactory.getProjectsHasInvoicesDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ProjectsHasQuotes obj) directly
     * @param id Identifier to delete
     */
    public void deleteProjectsHasQuotes(final ProjectsHasQuotesPK id)  {
        HibernateNevitiumproDaoFactory.getProjectsHasQuotesDao().delete(loadProjectsHasQuotes(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ProjectsHasQuotes object
     */
    public ProjectsHasQuotes loadProjectsHasQuotes(final ProjectsHasQuotesPK id) {
        return HibernateNevitiumproDaoFactory.getProjectsHasQuotesDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public ProjectsHasQuotes getProjectsHasQuotes(final ProjectsHasQuotesPK id) {
        return HibernateNevitiumproDaoFactory.getProjectsHasQuotesDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Quotes obj) directly
     * @param id Identifier to delete
     */
    public void deleteQuotes(final Integer id)  {
        HibernateNevitiumproDaoFactory.getQuotesDao().delete(loadQuotes(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Quotes object
     */
    public Quotes loadQuotes(final Integer id) {
        return HibernateNevitiumproDaoFactory.getQuotesDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Quotes getQuotes(final Integer id) {
        return HibernateNevitiumproDaoFactory.getQuotesDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (QuoteItems obj) directly
     * @param id Identifier to delete
     */
    public void deleteQuoteItems(final Integer id)  {
        HibernateNevitiumproDaoFactory.getQuoteItemsDao().delete(loadQuoteItems(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a QuoteItems object
     */
    public QuoteItems loadQuoteItems(final Integer id) {
        return HibernateNevitiumproDaoFactory.getQuoteItemsDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public QuoteItems getQuoteItems(final Integer id) {
        return HibernateNevitiumproDaoFactory.getQuoteItemsDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (UserAccount obj) directly
     * @param id Identifier to delete
     */
    public void deleteUserAccount(final Integer id)  {
        HibernateNevitiumproDaoFactory.getUserAccountDao().delete(loadUserAccount(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a UserAccount object
     */
    public UserAccount loadUserAccount(final Integer id) {
        return HibernateNevitiumproDaoFactory.getUserAccountDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public UserAccount getUserAccount(final Integer id) {
        return HibernateNevitiumproDaoFactory.getUserAccountDao().get(id);
    }  
    /** Returns a singleton instance of this class.
     * @return an singleton instance
     */
    public static synchronized DataLayerNevitiumPro getInstance() {
        
        if (instance == null) {
        	if (context == null) {
        		throw new IllegalStateException("Context is null. Make sure Spring is initialized.");
        	}
     		instance = (DataLayerNevitiumPro) context.getBean("dataLayerNevitiumProImpl");
        }
        
        return instance; 
    }
    /** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     public Query createQuery(final String query) {
        return this.sessionFactory.getCurrentSession().createQuery(query);
    }
    /** Returns a criteria handle.
     * @param criteria Criteria to use
     * @return A criteria instance
     */
     public Criteria createCriteria(final String criteria) {
        return this.sessionFactory.getCurrentSession().createCriteria(criteria);
    }
    /** Returns a Query handle based on your package-level named query.
     * @param query Query to use
     * @return A query instance
     */
     public Query getNamedQuery(final String query) {
        return this.sessionFactory.getCurrentSession().getNamedQuery(query);
    }
    /** Create a new Criteria instance, for the given entity class, or a superclass of an entity class.
	* @param persistentObject a class, which is persistent, or has persistent subclasses 
	* @return Criteria instance
	*/
	@SuppressWarnings("unchecked")
	public Criteria createCriteria(Class persistentObject) {
        return this.sessionFactory.getCurrentSession().createCriteria(persistentObject);
    }
    /** Flushes the currently open session.
	*/
	public void flushSession() {
        this.sessionFactory.getCurrentSession().flush();
    }
    /** Clears the currently open session.
	*/
	public void clearSession() {
        this.sessionFactory.getCurrentSession().clear();
    }
    /** Flushes and clears the currently open session.
	*/
	public void flushAndClearSession() {
		flushSession();
		clearSession();
    }
	/** Call currentSession.replicate.
	 * @param obj to replicate
	 * @param replicationMode mode
	 */ 
	public void replicate(Object obj, ReplicationMode replicationMode) {
		this.sessionFactory.getCurrentSession().replicate(obj, replicationMode);
	}
	/** Hibernate Merge. 
	 * @param obj to merge
	 * @return obj merged.
	 */
	public Object merge(Object obj) {
		return this.sessionFactory.getCurrentSession().merge(obj);
	}
	/** Returns the current session.
	 * @return the currently active session
	 */
	public Session getCurrentSession() {
		return this.sessionFactory.getCurrentSession();
	}
	/** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     public SQLQuery createSQLQuery(final String query) {
        return this.sessionFactory.getCurrentSession().createSQLQuery(query);
    }
    /** Remove this instance from the session cache. 
	 * Changes to the instance will not be synchronized with the database
	 * @param obj object to evict
	 */
	public void evict(Object obj) {
        this.sessionFactory.getCurrentSession().evict(obj);
    }
    /**
     * Return the persistent instance of the given entity class with the given 
     * identifier, or null if there is no such persistent instance. 
     * (If the instance, or a proxy for the instance, is already 
     * associated with the session, return that instance or proxy)
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return a persistent instance or null
     * @throws HibernateException
     */
	public Object get(Class<?> clazz, Serializable id) throws HibernateException {
        return this.sessionFactory.getCurrentSession().get(clazz, id);
    }	


    /**
     * Return the persistent instance of the given entity class with the given identifier, assuming that the instance exists.
     *You should not use this method to determine if an instance exists (use get() instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error.
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return the persistent instance or proxy
     * @throws HibernateException
     */
	public Object load(Class<?> clazz, Serializable id) throws HibernateException {
        return this.sessionFactory.getCurrentSession().load(clazz, id);  
    }
	/**
	 * Reattaches the given entity to the current session using LockMode.NONE
	 *
	 * @param entity to reattach
	 */
	public void reattachEntityWithNoLock(IPojoGenEntity entity) {
		if (entity != null) {
        		this.sessionFactory.getCurrentSession().lock(entity, LockMode.NONE);
    		}
	}
	/**
	 * Reattaches the given entities to the current session.
	 *
	 * @param entities to attach
	 */
	public void reattachEntitiesWithNoLock(Collection<? extends IPojoGenEntity> entities) {
   		if (entities != null) {
		       for (IPojoGenEntity entity : entities) {
            		this.sessionFactory.getCurrentSession().lock(entity, LockMode.NONE);
        		 }
    		}
	}}

