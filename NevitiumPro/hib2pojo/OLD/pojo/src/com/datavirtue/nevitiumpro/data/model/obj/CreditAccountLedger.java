package com.datavirtue.nevitiumpro.data.model.obj;

import com.datavirtue.nevitiumpro.data.model.obj.ICreditAccountLedger;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: credit_account_ledger.
 * @author autogenerated
 */

@Entity
@Table(name = "credit_account_ledger", catalog = "NevitiumPro")
public class CreditAccountLedger implements Cloneable, Serializable, IPojoGenEntity, ICreditAccountLedger {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559029506L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private java.math.BigDecimal credit;
	/** Field mapping. */
	private java.math.BigDecimal creditLimit;
	/** Field mapping. */
	private Long date;
	/** Field mapping. */
	private java.math.BigDecimal debit;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String memo;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public CreditAccountLedger() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public CreditAccountLedger(Integer id) {
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return CreditAccountLedger.class;
	}
 

    /**
     * Return the value associated with the column: credit.
	 * @return A java.math.BigDecimal object (this.credit)
	 */
	public java.math.BigDecimal getCredit() {
		return this.credit;
		
	}
	

  
    /**  
     * Set the value related to the column: credit.
	 * @param credit the credit value you wish to set
	 */
	public void setCredit(final java.math.BigDecimal credit) {
		this.credit = credit;
	}

    /**
     * Return the value associated with the column: creditLimit.
	 * @return A java.math.BigDecimal object (this.creditLimit)
	 */
	@Basic( optional = true )
	@Column( name = "credit_limit"  )
	public java.math.BigDecimal getCreditLimit() {
		return this.creditLimit;
		
	}
	

  
    /**  
     * Set the value related to the column: creditLimit.
	 * @param creditLimit the creditLimit value you wish to set
	 */
	public void setCreditLimit(final java.math.BigDecimal creditLimit) {
		this.creditLimit = creditLimit;
	}

    /**
     * Return the value associated with the column: date.
	 * @return A Long object (this.date)
	 */
	public Long getDate() {
		return this.date;
		
	}
	

  
    /**  
     * Set the value related to the column: date.
	 * @param date the date value you wish to set
	 */
	public void setDate(final Long date) {
		this.date = date;
	}

    /**
     * Return the value associated with the column: debit.
	 * @return A java.math.BigDecimal object (this.debit)
	 */
	public java.math.BigDecimal getDebit() {
		return this.debit;
		
	}
	

  
    /**  
     * Set the value related to the column: debit.
	 * @param debit the debit value you wish to set
	 */
	public void setDebit(final java.math.BigDecimal debit) {
		this.debit = debit;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "credit_account_ledger_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: memo.
	 * @return A String object (this.memo)
	 */
	@Basic( optional = true )
	@Column( length = 40  )
	public String getMemo() {
		return this.memo;
		
	}
	

  
    /**  
     * Set the value related to the column: memo.
	 * @param memo the memo value you wish to set
	 */
	public void setMemo(final String memo) {
		this.memo = memo;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public CreditAccountLedger clone() throws CloneNotSupportedException {
		
        final CreditAccountLedger copy = (CreditAccountLedger)super.clone();

		copy.setCredit(this.getCredit());
		copy.setCreditLimit(this.getCreditLimit());
		copy.setDate(this.getDate());
		copy.setDebit(this.getDebit());
		copy.setId(this.getId());
		copy.setMemo(this.getMemo());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("credit: " + this.getCredit() + ", ");
		sb.append("creditLimit: " + this.getCreditLimit() + ", ");
		sb.append("date: " + this.getDate() + ", ");
		sb.append("debit: " + this.getDebit() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("memo: " + this.getMemo());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final CreditAccountLedger that; 
		try {
			that = (CreditAccountLedger) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCredit() == null) && (that.getCredit() == null)) || (getCredit() != null && getCredit().equals(that.getCredit())));
		result = result && (((getCreditLimit() == null) && (that.getCreditLimit() == null)) || (getCreditLimit() != null && getCreditLimit().equals(that.getCreditLimit())));
		result = result && (((getDate() == null) && (that.getDate() == null)) || (getDate() != null && getDate().equals(that.getDate())));
		result = result && (((getDebit() == null) && (that.getDebit() == null)) || (getDebit() != null && getDebit().equals(that.getDebit())));
		result = result && (((getMemo() == null) && (that.getMemo() == null)) || (getMemo() != null && getMemo().equals(that.getMemo())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
