package com.datavirtue.nevitiumpro.data.model.obj;

import com.datavirtue.nevitiumpro.data.model.obj.IConnectionsDocuments;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: connections_documents.
 * @author autogenerated
 */

@Entity
@Table(name = "connections_documents", catalog = "NevitiumPro")
public class ConnectionsDocuments implements Cloneable, Serializable, IPojoGenEntity, IConnectionsDocuments {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559029509L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String application;
	/** Field mapping. */
	private Byte[] binDocument;
	/** Field mapping. */
	private Connections connectionsConnections;
	/** Field mapping. */
	private Long date;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String subject;
	/** Field mapping. */
	private String textDocument;
	/** Field mapping. */
	private String type;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public ConnectionsDocuments() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public ConnectionsDocuments(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param connectionsConnections Connections object;
	 * @param id Integer object;
	 */
	public ConnectionsDocuments(Connections connectionsConnections, Integer id) {

		this.connectionsConnections = connectionsConnections;
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return ConnectionsDocuments.class;
	}
 

    /**
     * Return the value associated with the column: application.
	 * @return A String object (this.application)
	 */
	@Basic( optional = true )
	@Column( length = 30  )
	public String getApplication() {
		return this.application;
		
	}
	

  
    /**  
     * Set the value related to the column: application.
	 * @param application the application value you wish to set
	 */
	public void setApplication(final String application) {
		this.application = application;
	}

    /**
     * Return the value associated with the column: binDocument.
	 * @return A Byte[] object (this.binDocument)
	 */
	@Basic( optional = true )
	@Column( name = "bin_document"  )
	public Byte[] getBinDocument() {
		return this.binDocument;
		
	}
	

  
    /**  
     * Set the value related to the column: binDocument.
	 * @param binDocument the binDocument value you wish to set
	 */
	public void setBinDocument(final Byte[] binDocument) {
		this.binDocument = binDocument;
	}

    /**
     * Return the value associated with the column: connectionsConnections.
	 * @return A Connections object (this.connectionsConnections)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "CONNECTIONS_CONNECTIONS_ID", nullable = false )
	public Connections getConnectionsConnections() {
		return this.connectionsConnections;
		
	}
	

  
    /**  
     * Set the value related to the column: connectionsConnections.
	 * @param connectionsConnections the connectionsConnections value you wish to set
	 */
	public void setConnectionsConnections(final Connections connectionsConnections) {
		this.connectionsConnections = connectionsConnections;
	}

    /**
     * Return the value associated with the column: date.
	 * @return A Long object (this.date)
	 */
	public Long getDate() {
		return this.date;
		
	}
	

  
    /**  
     * Set the value related to the column: date.
	 * @param date the date value you wish to set
	 */
	public void setDate(final Long date) {
		this.date = date;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "connections_documents_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: subject.
	 * @return A String object (this.subject)
	 */
	@Basic( optional = true )
	@Column( length = 80  )
	public String getSubject() {
		return this.subject;
		
	}
	

  
    /**  
     * Set the value related to the column: subject.
	 * @param subject the subject value you wish to set
	 */
	public void setSubject(final String subject) {
		this.subject = subject;
	}

    /**
     * Return the value associated with the column: textDocument.
	 * @return A String object (this.textDocument)
	 */
	@Basic( optional = true )
	@Column( name = "text_document", length = 65535  )
	public String getTextDocument() {
		return this.textDocument;
		
	}
	

  
    /**  
     * Set the value related to the column: textDocument.
	 * @param textDocument the textDocument value you wish to set
	 */
	public void setTextDocument(final String textDocument) {
		this.textDocument = textDocument;
	}

    /**
     * Return the value associated with the column: type.
	 * @return A String object (this.type)
	 */
	@Basic( optional = true )
	@Column( length = 3  )
	public String getType() {
		return this.type;
		
	}
	

  
    /**  
     * Set the value related to the column: type.
	 * @param type the type value you wish to set
	 */
	public void setType(final String type) {
		this.type = type;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public ConnectionsDocuments clone() throws CloneNotSupportedException {
		
        final ConnectionsDocuments copy = (ConnectionsDocuments)super.clone();

		copy.setApplication(this.getApplication());
		copy.setBinDocument(this.getBinDocument());
		copy.setConnectionsConnections(this.getConnectionsConnections());
		copy.setDate(this.getDate());
		copy.setId(this.getId());
		copy.setSubject(this.getSubject());
		copy.setTextDocument(this.getTextDocument());
		copy.setType(this.getType());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("application: " + this.getApplication() + ", ");
		sb.append("binDocument: " + (this.binDocument == null ? null : Arrays.toString(this.getBinDocument())) + ", ");
		sb.append("date: " + this.getDate() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("subject: " + this.getSubject() + ", ");
		sb.append("textDocument: " + this.getTextDocument() + ", ");
		sb.append("type: " + this.getType());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final ConnectionsDocuments that; 
		try {
			that = (ConnectionsDocuments) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getApplication() == null) && (that.getApplication() == null)) || (getApplication() != null && getApplication().equals(that.getApplication())));
		result = result && (((getBinDocument() == null) && (that.getBinDocument() == null)) || (getBinDocument() != null && getBinDocument().equals(that.getBinDocument())));
		result = result && (((getConnectionsConnections() == null) && (that.getConnectionsConnections() == null)) || (getConnectionsConnections() != null && getConnectionsConnections().getId().equals(that.getConnectionsConnections().getId())));	
		result = result && (((getDate() == null) && (that.getDate() == null)) || (getDate() != null && getDate().equals(that.getDate())));
		result = result && (((getSubject() == null) && (that.getSubject() == null)) || (getSubject() != null && getSubject().equals(that.getSubject())));
		result = result && (((getTextDocument() == null) && (that.getTextDocument() == null)) || (getTextDocument() != null && getTextDocument().equals(that.getTextDocument())));
		result = result && (((getType() == null) && (that.getType() == null)) || (getType() != null && getType().equals(that.getType())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
