package com.datavirtue.nevitiumpro.data.model.obj;

import com.datavirtue.nevitiumpro.data.model.obj.IUserAccount;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: user_accounts.
 * @author autogenerated
 */

@Entity
@Table(name = "user_accounts", catalog = "NevitiumPro")
public class UserAccount implements Cloneable, Serializable, IPojoGenEntity, IUserAccount {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559029482L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Integer checks;
	/** Field mapping. */
	private Integer connections;
	/** Field mapping. */
	private Integer exports;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private Integer inventory;
	/** Field mapping. */
	private Integer invoices;
	/** Field mapping. */
	private Integer invoiceManager;
	/** Field mapping. */
	private Boolean master;
	/** Field mapping. */
	private String password;
	/** Field mapping. */
	private Integer quotes;
	/** Field mapping. */
	private Integer reports;
	/** Field mapping. */
	private Integer settings;
	/** Field mapping. */
	private String username;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public UserAccount() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public UserAccount(Integer id) {
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return UserAccount.class;
	}
 

    /**
     * Return the value associated with the column: checks.
	 * @return A Integer object (this.checks)
	 */
	public Integer getChecks() {
		return this.checks;
		
	}
	

  
    /**  
     * Set the value related to the column: checks.
	 * @param checks the checks value you wish to set
	 */
	public void setChecks(final Integer checks) {
		this.checks = checks;
	}

    /**
     * Return the value associated with the column: connections.
	 * @return A Integer object (this.connections)
	 */
	public Integer getConnections() {
		return this.connections;
		
	}
	

  
    /**  
     * Set the value related to the column: connections.
	 * @param connections the connections value you wish to set
	 */
	public void setConnections(final Integer connections) {
		this.connections = connections;
	}

    /**
     * Return the value associated with the column: exports.
	 * @return A Integer object (this.exports)
	 */
	public Integer getExports() {
		return this.exports;
		
	}
	

  
    /**  
     * Set the value related to the column: exports.
	 * @param exports the exports value you wish to set
	 */
	public void setExports(final Integer exports) {
		this.exports = exports;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "user_accounts_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: inventory.
	 * @return A Integer object (this.inventory)
	 */
	public Integer getInventory() {
		return this.inventory;
		
	}
	

  
    /**  
     * Set the value related to the column: inventory.
	 * @param inventory the inventory value you wish to set
	 */
	public void setInventory(final Integer inventory) {
		this.inventory = inventory;
	}

    /**
     * Return the value associated with the column: invoices.
	 * @return A Integer object (this.invoices)
	 */
	public Integer getInvoices() {
		return this.invoices;
		
	}
	

  
    /**  
     * Set the value related to the column: invoices.
	 * @param invoices the invoices value you wish to set
	 */
	public void setInvoices(final Integer invoices) {
		this.invoices = invoices;
	}

    /**
     * Return the value associated with the column: invoiceManager.
	 * @return A Integer object (this.invoiceManager)
	 */
	@Basic( optional = true )
	@Column( name = "invoice_manager"  )
	public Integer getInvoiceManager() {
		return this.invoiceManager;
		
	}
	

  
    /**  
     * Set the value related to the column: invoiceManager.
	 * @param invoiceManager the invoiceManager value you wish to set
	 */
	public void setInvoiceManager(final Integer invoiceManager) {
		this.invoiceManager = invoiceManager;
	}

    /**
     * Return the value associated with the column: master.
	 * @return A Boolean object (this.master)
	 */
	public Boolean isMaster() {
		return this.master;
		
	}
	

  
    /**  
     * Set the value related to the column: master.
	 * @param master the master value you wish to set
	 */
	public void setMaster(final Boolean master) {
		this.master = master;
	}

    /**
     * Return the value associated with the column: password.
	 * @return A String object (this.password)
	 */
	@Basic( optional = true )
	@Column( length = 200  )
	public String getPassword() {
		return this.password;
		
	}
	

  
    /**  
     * Set the value related to the column: password.
	 * @param password the password value you wish to set
	 */
	public void setPassword(final String password) {
		this.password = password;
	}

    /**
     * Return the value associated with the column: quotes.
	 * @return A Integer object (this.quotes)
	 */
	public Integer getQuotes() {
		return this.quotes;
		
	}
	

  
    /**  
     * Set the value related to the column: quotes.
	 * @param quotes the quotes value you wish to set
	 */
	public void setQuotes(final Integer quotes) {
		this.quotes = quotes;
	}

    /**
     * Return the value associated with the column: reports.
	 * @return A Integer object (this.reports)
	 */
	public Integer getReports() {
		return this.reports;
		
	}
	

  
    /**  
     * Set the value related to the column: reports.
	 * @param reports the reports value you wish to set
	 */
	public void setReports(final Integer reports) {
		this.reports = reports;
	}

    /**
     * Return the value associated with the column: settings.
	 * @return A Integer object (this.settings)
	 */
	public Integer getSettings() {
		return this.settings;
		
	}
	

  
    /**  
     * Set the value related to the column: settings.
	 * @param settings the settings value you wish to set
	 */
	public void setSettings(final Integer settings) {
		this.settings = settings;
	}

    /**
     * Return the value associated with the column: username.
	 * @return A String object (this.username)
	 */
	@Basic( optional = true )
	@Column( length = 20  )
	public String getUsername() {
		return this.username;
		
	}
	

  
    /**  
     * Set the value related to the column: username.
	 * @param username the username value you wish to set
	 */
	public void setUsername(final String username) {
		this.username = username;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public UserAccount clone() throws CloneNotSupportedException {
		
        final UserAccount copy = (UserAccount)super.clone();

		copy.setChecks(this.getChecks());
		copy.setConnections(this.getConnections());
		copy.setExports(this.getExports());
		copy.setId(this.getId());
		copy.setInventory(this.getInventory());
		copy.setInvoices(this.getInvoices());
		copy.setInvoiceManager(this.getInvoiceManager());
		copy.setMaster(this.isMaster());
		copy.setPassword(this.getPassword());
		copy.setQuotes(this.getQuotes());
		copy.setReports(this.getReports());
		copy.setSettings(this.getSettings());
		copy.setUsername(this.getUsername());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("checks: " + this.getChecks() + ", ");
		sb.append("connections: " + this.getConnections() + ", ");
		sb.append("exports: " + this.getExports() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("inventory: " + this.getInventory() + ", ");
		sb.append("invoices: " + this.getInvoices() + ", ");
		sb.append("invoiceManager: " + this.getInvoiceManager() + ", ");
		sb.append("master: " + this.isMaster() + ", ");
		sb.append("password: " + this.getPassword() + ", ");
		sb.append("quotes: " + this.getQuotes() + ", ");
		sb.append("reports: " + this.getReports() + ", ");
		sb.append("settings: " + this.getSettings() + ", ");
		sb.append("username: " + this.getUsername());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final UserAccount that; 
		try {
			that = (UserAccount) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getChecks() == null) && (that.getChecks() == null)) || (getChecks() != null && getChecks().equals(that.getChecks())));
		result = result && (((getConnections() == null) && (that.getConnections() == null)) || (getConnections() != null && getConnections().equals(that.getConnections())));
		result = result && (((getExports() == null) && (that.getExports() == null)) || (getExports() != null && getExports().equals(that.getExports())));
		result = result && (((getInventory() == null) && (that.getInventory() == null)) || (getInventory() != null && getInventory().equals(that.getInventory())));
		result = result && (((getInvoices() == null) && (that.getInvoices() == null)) || (getInvoices() != null && getInvoices().equals(that.getInvoices())));
		result = result && (((getInvoiceManager() == null) && (that.getInvoiceManager() == null)) || (getInvoiceManager() != null && getInvoiceManager().equals(that.getInvoiceManager())));
		result = result && (((isMaster() == null) && (that.isMaster() == null)) || (isMaster() != null && isMaster().equals(that.isMaster())));
		result = result && (((getPassword() == null) && (that.getPassword() == null)) || (getPassword() != null && getPassword().equals(that.getPassword())));
		result = result && (((getQuotes() == null) && (that.getQuotes() == null)) || (getQuotes() != null && getQuotes().equals(that.getQuotes())));
		result = result && (((getReports() == null) && (that.getReports() == null)) || (getReports() != null && getReports().equals(that.getReports())));
		result = result && (((getSettings() == null) && (that.getSettings() == null)) || (getSettings() != null && getSettings().equals(that.getSettings())));
		result = result && (((getUsername() == null) && (that.getUsername() == null)) || (getUsername() != null && getUsername().equals(that.getUsername())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
