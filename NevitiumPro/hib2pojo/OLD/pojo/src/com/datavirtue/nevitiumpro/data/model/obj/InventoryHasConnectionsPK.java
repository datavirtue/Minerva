package com.datavirtue.nevitiumpro.data.model.obj;

import com.datavirtue.nevitiumpro.data.model.obj.IInventoryHasConnectionsPK;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Embeddable;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;


/** 
 * Object mapping for hibernate-handled table: inventory_has_connections.
 * @author autogenerated
 */

@Embeddable
public class InventoryHasConnectionsPK implements Cloneable, Serializable,  IInventoryHasConnectionsPK {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559029500L;

	

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "CONNECTIONS_CONNECTIONS_ID", nullable = false , insertable = false, updatable = false )
	private Connections connectionsConnections;

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "INVENTORY_INVENTORY_ID", nullable = false , insertable = false, updatable = false )
	private Inventory inventoryInventory;

 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return InventoryHasConnectionsPK.class;
	}
 

    /**
     * Return the value associated with the column: connectionsConnections.
	 * @return A Connections object (this.connectionsConnections)
	 */
	public Connections getConnectionsConnections() {
		return this.connectionsConnections;
		
	}
	

  
    /**  
     * Set the value related to the column: connectionsConnections.
	 * @param connectionsConnections the connectionsConnections value you wish to set
	 */
	public void setConnectionsConnections(final Connections connectionsConnections) {
		this.connectionsConnections = connectionsConnections;
	}

    /**
     * Return the value associated with the column: inventoryInventory.
	 * @return A Inventory object (this.inventoryInventory)
	 */
	public Inventory getInventoryInventory() {
		return this.inventoryInventory;
		
	}
	

  
    /**  
     * Set the value related to the column: inventoryInventory.
	 * @param inventoryInventory the inventoryInventory value you wish to set
	 */
	public void setInventoryInventory(final Inventory inventoryInventory) {
		this.inventoryInventory = inventoryInventory;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public InventoryHasConnectionsPK clone() throws CloneNotSupportedException {
		
        final InventoryHasConnectionsPK copy = (InventoryHasConnectionsPK)super.clone();

		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		if (aThat == null)  {
			 return false;
		}
		
		final InventoryHasConnectionsPK that; 
		try {
			that = (InventoryHasConnectionsPK) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((getConnectionsConnections() == null) && (that.getConnectionsConnections() == null)) || (getConnectionsConnections() != null && getConnectionsConnections().getId().equals(that.getConnectionsConnections().getId())));	
		result = result && (((getInventoryInventory() == null) && (that.getInventoryInventory() == null)) || (getInventoryInventory() != null && getInventoryInventory().getId().equals(that.getInventoryInventory().getId())));	
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
	int hash = 0;
		hash = hash + getConnectionsConnections().hashCode();
		hash = hash + getInventoryInventory().hashCode();
	return hash;
	}
	

	
}
