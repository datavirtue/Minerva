package com.datavirtue.nevitiumpro.data.factories;

import com.datavirtue.nevitiumpro.data.factories.NevitiumproDataPoolFactory;
import com.datavirtue.nevitiumpro.data.model.obj.*;
import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import org.springframework.stereotype.Component;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;

/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class NevitiumProDataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"QuoteItems", "ProjectsHasQuotes", "InvoiceReturns", "InvoicePayments", "InvoiceItems", "UserAccount", "Quotes", "ProjectsHasInvoices", "ProjectsHasConnections", "Projects", "Invoices", "InventoryImages", "InventoryHasConnections", "Inventory", "DebitAccounts", "DebitAccountLedger", "CreditAccounts", "CreditAccountLedger", "ConnectionsShipping", "ConnectionsDocuments", "Connections"};
	static{
		// Store table deps for possible use. 
 		tableDeps.put("ConnectionsDocuments", "Connections");
 		tableDeps.put("ConnectionsShipping", "Connections");
 		tableDeps.put("InventoryHasConnections", "Connections");
 		tableDeps.put("InventoryHasConnections", "Inventory");
 		tableDeps.put("InventoryImages", "Inventory");
 		tableDeps.put("Invoices", "Connections");
 		tableDeps.put("InvoiceItems", "Invoices");
 		tableDeps.put("InvoicePayments", "Invoices");
 		tableDeps.put("InvoiceReturns", "Invoices");
 		tableDeps.put("ProjectsHasConnections", "Connections");
 		tableDeps.put("ProjectsHasConnections", "Projects");
 		tableDeps.put("ProjectsHasInvoices", "Invoices");
 		tableDeps.put("ProjectsHasInvoices", "Projects");
 		tableDeps.put("ProjectsHasQuotes", "Projects");
 		tableDeps.put("ProjectsHasQuotes", "Quotes");
 		tableDeps.put("Quotes", "Connections");
 		tableDeps.put("QuoteItems", "Quotes");
	}

    /**
     * Data pool factory for Connections.
     * @return ConnectionsA Connections object
     */
    public static Connections getConnections() {

        Connections connections = new Connections();    
        
        connections.setAddress(BasicDataGenerator.generateRandomString(40));
        connections.setAddress2(BasicDataGenerator.generateRandomString(40));
        connections.setCity(BasicDataGenerator.generateRandomString(30));
        connections.setCompanyName(BasicDataGenerator.generateRandomString(40));
        connections.setContact(BasicDataGenerator.generateRandomString(30));
        connections.setCountryCode(BasicDataGenerator.generateRandomString(2));
        connections.setCustomer(BasicDataGenerator.generateRandomBoolean());
        connections.setCustom1(BasicDataGenerator.generateRandomString(50));
        connections.setCustom2(BasicDataGenerator.generateRandomString(50));
        connections.setEmail(BasicDataGenerator.generateRandomString(50));
        connections.setFax(BasicDataGenerator.generateRandomString(20));
        connections.setFirstName(BasicDataGenerator.generateRandomString(20));
        connections.setLastName(BasicDataGenerator.generateRandomString(30));
        connections.setLatitude(BasicDataGenerator.generateRandomDecimal(10, 6));
        connections.setLongitude(BasicDataGenerator.generateRandomDecimal(10, 6));
        connections.setMobile1(BasicDataGenerator.generateRandomString(20));
        connections.setMobile2(BasicDataGenerator.generateRandomString(20));
        connections.setNote(BasicDataGenerator.generateRandomString(32000));
        connections.setPicture(BasicDataGenerator.generateRandomBinary(65535));
        connections.setPostCode(BasicDataGenerator.generateRandomString(10));
        connections.setState(BasicDataGenerator.generateRandomString(20));
        connections.setSupplier(BasicDataGenerator.generateRandomBoolean());
        connections.setTax1(BasicDataGenerator.generateRandomBoolean());
        connections.setTax2(BasicDataGenerator.generateRandomBoolean());
        connections.setWebsite(BasicDataGenerator.generateRandomString(100));

        return connections;
    }

    /**
     * Data pool factory for ConnectionsDocuments.
     * @return ConnectionsDocuments A ConnectionsDocuments object
     */
    public static ConnectionsDocuments getConnectionsDocuments() {

        ConnectionsDocuments connectionsDocuments =  getConnectionsDocuments(
	        getConnections());

		return connectionsDocuments;
       
    }

     /**
     * Data pool factory for ConnectionsDocuments.
     * @param connectionsConnections A valid Connections object
     * @return ConnectionsDocuments A ConnectionsDocuments object
     */
    public static ConnectionsDocuments getConnectionsDocuments(Connections connectionsConnections) {
        ConnectionsDocuments connectionsDocuments = new ConnectionsDocuments();     
        connectionsDocuments.setApplication(BasicDataGenerator.generateRandomString(30));
        connectionsDocuments.setBinDocument(BasicDataGenerator.generateRandomBinary(65535));
		if (connectionsConnections != null) {
			connectionsConnections.addConnectionsDocuments (connectionsDocuments);
		}
        connectionsDocuments.setDate(BasicDataGenerator.generateRandomLong());
        connectionsDocuments.setSubject(BasicDataGenerator.generateRandomString(80));
        connectionsDocuments.setTextDocument(BasicDataGenerator.generateRandomString(65535));
        connectionsDocuments.setType(BasicDataGenerator.generateRandomString(3));

        return connectionsDocuments;
    }

    /**
     * Data pool factory for ConnectionsShipping.
     * @return ConnectionsShipping A ConnectionsShipping object
     */
    public static ConnectionsShipping getConnectionsShipping() {

        ConnectionsShipping connectionsShipping =  getConnectionsShipping(
	        getConnections());

		return connectionsShipping;
       
    }

     /**
     * Data pool factory for ConnectionsShipping.
     * @param connectionsConnections A valid Connections object
     * @return ConnectionsShipping A ConnectionsShipping object
     */
    public static ConnectionsShipping getConnectionsShipping(Connections connectionsConnections) {
        ConnectionsShipping connectionsShipping = new ConnectionsShipping();     
        connectionsShipping.setAddress(BasicDataGenerator.generateRandomString(40));
        connectionsShipping.setAddress2(BasicDataGenerator.generateRandomString(40));
        connectionsShipping.setAttn(BasicDataGenerator.generateRandomString(40));
        connectionsShipping.setCity(BasicDataGenerator.generateRandomString(30));
		if (connectionsConnections != null) {
			connectionsConnections.addConnectionsShipping (connectionsShipping);
		}
        connectionsShipping.setCountryCode(BasicDataGenerator.generateRandomString(2));
        connectionsShipping.setCustom1(BasicDataGenerator.generateRandomString(50));
        connectionsShipping.setCustom2(BasicDataGenerator.generateRandomString(50));
        connectionsShipping.setDefaultShippingAddress(BasicDataGenerator.generateRandomBoolean());
        connectionsShipping.setEmail(BasicDataGenerator.generateRandomString(50));
        connectionsShipping.setFax(BasicDataGenerator.generateRandomString(20));
        connectionsShipping.setLatitude(BasicDataGenerator.generateRandomDecimal(10, 6));
        connectionsShipping.setLocationName(BasicDataGenerator.generateRandomString(40));
        connectionsShipping.setLongitude(BasicDataGenerator.generateRandomDecimal(10, 6));
        connectionsShipping.setMobile1(BasicDataGenerator.generateRandomString(20));
        connectionsShipping.setMobile2(BasicDataGenerator.generateRandomString(20));
        connectionsShipping.setNote(BasicDataGenerator.generateRandomString(16000));
        connectionsShipping.setPostCode(BasicDataGenerator.generateRandomString(10));
        connectionsShipping.setState(BasicDataGenerator.generateRandomString(20));
        connectionsShipping.setWebsite(BasicDataGenerator.generateRandomString(100));

        return connectionsShipping;
    }

    /**
     * Data pool factory for CreditAccounts.
     * @return CreditAccountsA CreditAccounts object
     */
    public static CreditAccounts getCreditAccounts() {

        CreditAccounts creditAccounts = new CreditAccounts();    
        
        creditAccounts.setAccountNumber(BasicDataGenerator.generateRandomString(16));
        creditAccounts.setInceptionDate(BasicDataGenerator.generateRandomLong());
        creditAccounts.setNotes(BasicDataGenerator.generateRandomString(32000));

        return creditAccounts;
    }

    /**
     * Data pool factory for CreditAccountLedger.
     * @return CreditAccountLedgerA CreditAccountLedger object
     */
    public static CreditAccountLedger getCreditAccountLedger() {

        CreditAccountLedger creditAccountLedger = new CreditAccountLedger();    
        
        creditAccountLedger.setCredit(BasicDataGenerator.generateRandomDecimal(19, 4));
        creditAccountLedger.setCreditLimit(BasicDataGenerator.generateRandomDecimal(19, 4));
        creditAccountLedger.setDate(BasicDataGenerator.generateRandomLong());
        creditAccountLedger.setDebit(BasicDataGenerator.generateRandomDecimal(19, 4));
        creditAccountLedger.setMemo(BasicDataGenerator.generateRandomString(40));

        return creditAccountLedger;
    }

    /**
     * Data pool factory for DebitAccounts.
     * @return DebitAccountsA DebitAccounts object
     */
    public static DebitAccounts getDebitAccounts() {

        DebitAccounts debitAccounts = new DebitAccounts();    
        
        debitAccounts.setAccountNumber(BasicDataGenerator.generateRandomString(16));
        debitAccounts.setInceptionDate(BasicDataGenerator.generateRandomLong());
        debitAccounts.setNotes(BasicDataGenerator.generateRandomString(32000));

        return debitAccounts;
    }

    /**
     * Data pool factory for DebitAccountLedger.
     * @return DebitAccountLedgerA DebitAccountLedger object
     */
    public static DebitAccountLedger getDebitAccountLedger() {

        DebitAccountLedger debitAccountLedger = new DebitAccountLedger();    
        
        debitAccountLedger.setCredit(BasicDataGenerator.generateRandomDecimal(19, 4));
        debitAccountLedger.setDate(BasicDataGenerator.generateRandomLong());
        debitAccountLedger.setDebit(BasicDataGenerator.generateRandomDecimal(19, 4));
        debitAccountLedger.setMemo(BasicDataGenerator.generateRandomString(40));

        return debitAccountLedger;
    }

    /**
     * Data pool factory for Inventory.
     * @return InventoryA Inventory object
     */
    public static Inventory getInventory() {

        Inventory inventory = new Inventory();    
        
        inventory.setAvailable(BasicDataGenerator.generateRandomBoolean());
        inventory.setCategory(BasicDataGenerator.generateRandomString(30));
        inventory.setCode(BasicDataGenerator.generateRandomString(16));
        inventory.setCost(BasicDataGenerator.generateRandomDecimal(19, 4));
        inventory.setCutoff(BasicDataGenerator.generateRandomDouble());
        inventory.setDescription(BasicDataGenerator.generateRandomString(300));
        inventory.setLastReceived(BasicDataGenerator.generateRandomLong());
        inventory.setLastSale(BasicDataGenerator.generateRandomLong());
        inventory.setOnhand(BasicDataGenerator.generateRandomDouble());
        inventory.setPartialQtyAllowed(BasicDataGenerator.generateRandomBoolean());
        inventory.setPrice(BasicDataGenerator.generateRandomDecimal(19, 4));
        inventory.setSize(BasicDataGenerator.generateRandomString(15));
        inventory.setTax1(BasicDataGenerator.generateRandomBoolean());
        inventory.setTax2(BasicDataGenerator.generateRandomBoolean());
        inventory.setUpc(BasicDataGenerator.generateRandomString(14));
        inventory.setWeight(BasicDataGenerator.generateRandomString(15));

        return inventory;
    }

    /**
     * Data pool factory for InventoryHasConnections.
     * @return InventoryHasConnectionsA InventoryHasConnections object
     */
    public static InventoryHasConnections getInventoryHasConnections() {

        InventoryHasConnections inventoryHasConnections = new InventoryHasConnections();    
        
        inventoryHasConnections.setId(getInventoryHasConnectionsPK());

        return inventoryHasConnections;
    }

    /**
     * Data pool factory for InventoryHasConnectionsPK.
     * @return InventoryHasConnectionsPK A InventoryHasConnectionsPK object
     */
    public static InventoryHasConnectionsPK getInventoryHasConnectionsPK() {

        InventoryHasConnectionsPK inventoryHasConnectionsPK =  getInventoryHasConnectionsPK(
	        getConnections(), getInventory());

		return inventoryHasConnectionsPK;
       
    }

     /**
     * Data pool factory for InventoryHasConnectionsPK.
     * @param connectionsConnections A valid Connections object
     * @param inventoryInventory A valid Inventory object
     * @return InventoryHasConnectionsPK A InventoryHasConnectionsPK object
     */
    public static InventoryHasConnectionsPK getInventoryHasConnectionsPK(Connections connectionsConnections, Inventory inventoryInventory) {
        InventoryHasConnectionsPK inventoryHasConnectionsPK = new InventoryHasConnectionsPK();     
        inventoryHasConnectionsPK.setConnectionsConnections(connectionsConnections);
        inventoryHasConnectionsPK.setInventoryInventory(inventoryInventory);

        return inventoryHasConnectionsPK;
    }

    /**
     * Data pool factory for InventoryImages.
     * @return InventoryImages A InventoryImages object
     */
    public static InventoryImages getInventoryImages() {

        InventoryImages inventoryImages =  getInventoryImages(
	        getInventory());

		return inventoryImages;
       
    }

     /**
     * Data pool factory for InventoryImages.
     * @param inventoryInventory A valid Inventory object
     * @return InventoryImages A InventoryImages object
     */
    public static InventoryImages getInventoryImages(Inventory inventoryInventory) {
        InventoryImages inventoryImages = new InventoryImages();     
        inventoryImages.setBitmap(BasicDataGenerator.generateRandomBinary(65535));
        inventoryImages.setDate(BasicDataGenerator.generateRandomLong());
        inventoryImages.setImageFormat(BasicDataGenerator.generateRandomString(3));
        inventoryImages.setImageUrl(BasicDataGenerator.generateRandomString(80));
		if (inventoryInventory != null) {
			inventoryInventory.addInventoryImages (inventoryImages);
		}
        inventoryImages.setTitle(BasicDataGenerator.generateRandomString(128));

        return inventoryImages;
    }

    /**
     * Data pool factory for Invoices.
     * @return Invoices A Invoices object
     */
    public static Invoices getInvoices() {

        Invoices invoices =  getInvoices(
	        getConnections());

		return invoices;
       
    }

     /**
     * Data pool factory for Invoices.
     * @param connectionsConnections A valid Connections object
     * @return Invoices A Invoices object
     */
    public static Invoices getInvoices(Connections connectionsConnections) {
        Invoices invoices = new Invoices();     
		if (connectionsConnections != null) {
			connectionsConnections.addInvoices (invoices);
		}
        invoices.setCustomer(BasicDataGenerator.generateRandomString(200));
        invoices.setDate(BasicDataGenerator.generateRandomLong());
        invoices.setInvoiceNumber(BasicDataGenerator.generateRandomString(12));
        invoices.setMessage(BasicDataGenerator.generateRandomString(4000));
        invoices.setPaid(BasicDataGenerator.generateRandomBoolean());
        invoices.setQuoteId(BasicDataGenerator.generateRandomInt());
        invoices.setTax1(BasicDataGenerator.generateRandomDecimal(19, 4));
        invoices.setTax2(BasicDataGenerator.generateRandomDecimal(19, 4));
        invoices.setVoided(BasicDataGenerator.generateRandomBoolean());

        return invoices;
    }

    /**
     * Data pool factory for InvoiceItems.
     * @return InvoiceItems A InvoiceItems object
     */
    public static InvoiceItems getInvoiceItems() {

        InvoiceItems invoiceItems =  getInvoiceItems(
	        getInvoices());

		return invoiceItems;
       
    }

     /**
     * Data pool factory for InvoiceItems.
     * @param invoicesInvoices A valid Invoices object
     * @return InvoiceItems A InvoiceItems object
     */
    public static InvoiceItems getInvoiceItems(Invoices invoicesInvoices) {
        InvoiceItems invoiceItems = new InvoiceItems();     
        invoiceItems.setCode(BasicDataGenerator.generateRandomString(20));
        invoiceItems.setCost(BasicDataGenerator.generateRandomDecimal(19, 4));
        invoiceItems.setDate(BasicDataGenerator.generateRandomLong());
        invoiceItems.setDescription(BasicDataGenerator.generateRandomString(300));
		if (invoicesInvoices != null) {
			invoicesInvoices.addInvoiceItems (invoiceItems);
		}
        invoiceItems.setQtySold(BasicDataGenerator.generateRandomDecimal(19, 4));
        invoiceItems.setTax1(BasicDataGenerator.generateRandomBoolean());
        invoiceItems.setTax2(BasicDataGenerator.generateRandomBoolean());
        invoiceItems.setUnitPrice(BasicDataGenerator.generateRandomDecimal(19, 4));

        return invoiceItems;
    }

    /**
     * Data pool factory for InvoicePayments.
     * @return InvoicePayments A InvoicePayments object
     */
    public static InvoicePayments getInvoicePayments() {

        InvoicePayments invoicePayments =  getInvoicePayments(
	        getInvoices());

		return invoicePayments;
       
    }

     /**
     * Data pool factory for InvoicePayments.
     * @param invoicesInvoices A valid Invoices object
     * @return InvoicePayments A InvoicePayments object
     */
    public static InvoicePayments getInvoicePayments(Invoices invoicesInvoices) {
        InvoicePayments invoicePayments = new InvoicePayments();     
        invoicePayments.setCredit(BasicDataGenerator.generateRandomDecimal(19, 4));
        invoicePayments.setDate(BasicDataGenerator.generateRandomLong());
        invoicePayments.setDebit(BasicDataGenerator.generateRandomDecimal(19, 4));
		if (invoicesInvoices != null) {
			invoicesInvoices.addInvoicePayments (invoicePayments);
		}
        invoicePayments.setMemo(BasicDataGenerator.generateRandomString(30));
        invoicePayments.setType(BasicDataGenerator.generateRandomString(10));

        return invoicePayments;
    }

    /**
     * Data pool factory for InvoiceReturns.
     * @return InvoiceReturns A InvoiceReturns object
     */
    public static InvoiceReturns getInvoiceReturns() {

        InvoiceReturns invoiceReturns =  getInvoiceReturns(
	        getInvoices());

		return invoiceReturns;
       
    }

     /**
     * Data pool factory for InvoiceReturns.
     * @param invoicesInvoices A valid Invoices object
     * @return InvoiceReturns A InvoiceReturns object
     */
    public static InvoiceReturns getInvoiceReturns(Invoices invoicesInvoices) {
        InvoiceReturns invoiceReturns = new InvoiceReturns();     
        invoiceReturns.setCode(BasicDataGenerator.generateRandomString(20));
        invoiceReturns.setCredit(BasicDataGenerator.generateRandomDecimal(19, 4));
        invoiceReturns.setDate(BasicDataGenerator.generateRandomLong());
        invoiceReturns.setDescription(BasicDataGenerator.generateRandomString(300));
		if (invoicesInvoices != null) {
			invoicesInvoices.addInvoiceReturns (invoiceReturns);
		}
        invoiceReturns.setQtyReturned(BasicDataGenerator.generateRandomDecimal(19, 4));

        return invoiceReturns;
    }

    /**
     * Data pool factory for Projects.
     * @return ProjectsA Projects object
     */
    public static Projects getProjects() {

        Projects projects = new Projects();    
        
        projects.setActualEndDate(BasicDataGenerator.generateRandomLong());
        projects.setMission(BasicDataGenerator.generateRandomString(32000));
        projects.setNotes(BasicDataGenerator.generateRandomString(65535));
        projects.setStartDate(BasicDataGenerator.generateRandomLong());
        projects.setTargetDate(BasicDataGenerator.generateRandomLong());
        projects.setTitle(BasicDataGenerator.generateRandomString(100));

        return projects;
    }

    /**
     * Data pool factory for ProjectsHasConnections.
     * @return ProjectsHasConnectionsA ProjectsHasConnections object
     */
    public static ProjectsHasConnections getProjectsHasConnections() {

        ProjectsHasConnections projectsHasConnections = new ProjectsHasConnections();    
        
        projectsHasConnections.setId(getProjectsHasConnectionsPK());

        return projectsHasConnections;
    }

    /**
     * Data pool factory for ProjectsHasConnectionsPK.
     * @return ProjectsHasConnectionsPK A ProjectsHasConnectionsPK object
     */
    public static ProjectsHasConnectionsPK getProjectsHasConnectionsPK() {

        ProjectsHasConnectionsPK projectsHasConnectionsPK =  getProjectsHasConnectionsPK(
	        getConnections(), getProjects());

		return projectsHasConnectionsPK;
       
    }

     /**
     * Data pool factory for ProjectsHasConnectionsPK.
     * @param connectionsConnections A valid Connections object
     * @param projectsProjects A valid Projects object
     * @return ProjectsHasConnectionsPK A ProjectsHasConnectionsPK object
     */
    public static ProjectsHasConnectionsPK getProjectsHasConnectionsPK(Connections connectionsConnections, Projects projectsProjects) {
        ProjectsHasConnectionsPK projectsHasConnectionsPK = new ProjectsHasConnectionsPK();     
        projectsHasConnectionsPK.setConnectionsConnections(connectionsConnections);
        projectsHasConnectionsPK.setProjectsProjects(projectsProjects);

        return projectsHasConnectionsPK;
    }

    /**
     * Data pool factory for ProjectsHasInvoices.
     * @return ProjectsHasInvoicesA ProjectsHasInvoices object
     */
    public static ProjectsHasInvoices getProjectsHasInvoices() {

        ProjectsHasInvoices projectsHasInvoices = new ProjectsHasInvoices();    
        
        projectsHasInvoices.setId(getProjectsHasInvoicesPK());

        return projectsHasInvoices;
    }

    /**
     * Data pool factory for ProjectsHasInvoicesPK.
     * @return ProjectsHasInvoicesPK A ProjectsHasInvoicesPK object
     */
    public static ProjectsHasInvoicesPK getProjectsHasInvoicesPK() {

        ProjectsHasInvoicesPK projectsHasInvoicesPK =  getProjectsHasInvoicesPK(
	        getInvoices(), getProjects());

		return projectsHasInvoicesPK;
       
    }

     /**
     * Data pool factory for ProjectsHasInvoicesPK.
     * @param invoicesInvoices A valid Invoices object
     * @param projectsProjects A valid Projects object
     * @return ProjectsHasInvoicesPK A ProjectsHasInvoicesPK object
     */
    public static ProjectsHasInvoicesPK getProjectsHasInvoicesPK(Invoices invoicesInvoices, Projects projectsProjects) {
        ProjectsHasInvoicesPK projectsHasInvoicesPK = new ProjectsHasInvoicesPK();     
        projectsHasInvoicesPK.setInvoicesInvoices(invoicesInvoices);
        projectsHasInvoicesPK.setProjectsProjects(projectsProjects);

        return projectsHasInvoicesPK;
    }

    /**
     * Data pool factory for ProjectsHasQuotes.
     * @return ProjectsHasQuotesA ProjectsHasQuotes object
     */
    public static ProjectsHasQuotes getProjectsHasQuotes() {

        ProjectsHasQuotes projectsHasQuotes = new ProjectsHasQuotes();    
        
        projectsHasQuotes.setId(getProjectsHasQuotesPK());

        return projectsHasQuotes;
    }

    /**
     * Data pool factory for ProjectsHasQuotesPK.
     * @return ProjectsHasQuotesPK A ProjectsHasQuotesPK object
     */
    public static ProjectsHasQuotesPK getProjectsHasQuotesPK() {

        ProjectsHasQuotesPK projectsHasQuotesPK =  getProjectsHasQuotesPK(
	        getProjects(), getQuotes());

		return projectsHasQuotesPK;
       
    }

     /**
     * Data pool factory for ProjectsHasQuotesPK.
     * @param projectsProjects A valid Projects object
     * @param quotesQuotes A valid Quotes object
     * @return ProjectsHasQuotesPK A ProjectsHasQuotesPK object
     */
    public static ProjectsHasQuotesPK getProjectsHasQuotesPK(Projects projectsProjects, Quotes quotesQuotes) {
        ProjectsHasQuotesPK projectsHasQuotesPK = new ProjectsHasQuotesPK();     
        projectsHasQuotesPK.setProjectsProjects(projectsProjects);
        projectsHasQuotesPK.setQuotesQuotes(quotesQuotes);

        return projectsHasQuotesPK;
    }

    /**
     * Data pool factory for Quotes.
     * @return Quotes A Quotes object
     */
    public static Quotes getQuotes() {

        Quotes quotes =  getQuotes(
	        getConnections());

		return quotes;
       
    }

     /**
     * Data pool factory for Quotes.
     * @param connectionsConnections A valid Connections object
     * @return Quotes A Quotes object
     */
    public static Quotes getQuotes(Connections connectionsConnections) {
        Quotes quotes = new Quotes();     
		if (connectionsConnections != null) {
			connectionsConnections.addQuotes (quotes);
		}
        quotes.setCustomer(BasicDataGenerator.generateRandomString(200));
        quotes.setDate(BasicDataGenerator.generateRandomLong());
        quotes.setInvoiceNumber(BasicDataGenerator.generateRandomString(12));
        quotes.setMessage(BasicDataGenerator.generateRandomString(4000));
        quotes.setTax1(BasicDataGenerator.generateRandomDecimal(19, 4));
        quotes.setTax2(BasicDataGenerator.generateRandomDecimal(19, 4));

        return quotes;
    }

    /**
     * Data pool factory for QuoteItems.
     * @return QuoteItems A QuoteItems object
     */
    public static QuoteItems getQuoteItems() {

        QuoteItems quoteItems =  getQuoteItems(
	        getQuotes());

		return quoteItems;
       
    }

     /**
     * Data pool factory for QuoteItems.
     * @param quotesQuotes A valid Quotes object
     * @return QuoteItems A QuoteItems object
     */
    public static QuoteItems getQuoteItems(Quotes quotesQuotes) {
        QuoteItems quoteItems = new QuoteItems();     
        quoteItems.setCode(BasicDataGenerator.generateRandomString(20));
        quoteItems.setCost(BasicDataGenerator.generateRandomDecimal(19, 4));
        quoteItems.setDate(BasicDataGenerator.generateRandomLong());
        quoteItems.setDescription(BasicDataGenerator.generateRandomString(300));
        quoteItems.setQtySold(BasicDataGenerator.generateRandomDecimal(19, 4));
		if (quotesQuotes != null) {
			quotesQuotes.addQuoteItems (quoteItems);
		}
        quoteItems.setTax1(BasicDataGenerator.generateRandomBoolean());
        quoteItems.setTax2(BasicDataGenerator.generateRandomBoolean());
        quoteItems.setUnitPrice(BasicDataGenerator.generateRandomDecimal(19, 4));

        return quoteItems;
    }

    /**
     * Data pool factory for UserAccount.
     * @return UserAccountA UserAccount object
     */
    public static UserAccount getUserAccount() {

        UserAccount UserAccount = new UserAccount();    
        
        UserAccount.setChecks(BasicDataGenerator.generateRandomInt());
        UserAccount.setConnections(BasicDataGenerator.generateRandomInt());
        UserAccount.setExports(BasicDataGenerator.generateRandomInt());
        UserAccount.setInventory(BasicDataGenerator.generateRandomInt());
        UserAccount.setInvoices(BasicDataGenerator.generateRandomInt());
        UserAccount.setInvoiceManager(BasicDataGenerator.generateRandomInt());
        UserAccount.setMaster(BasicDataGenerator.generateRandomBoolean());
        UserAccount.setPassword(BasicDataGenerator.generateRandomString(200));
        UserAccount.setQuotes(BasicDataGenerator.generateRandomInt());
        UserAccount.setReports(BasicDataGenerator.generateRandomInt());
        UserAccount.setSettings(BasicDataGenerator.generateRandomInt());
        UserAccount.setUsername(BasicDataGenerator.generateRandomString(20));

        return UserAccount;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
	
	/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public static Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}
	
}