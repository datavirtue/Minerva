package com.datavirtue.nevitiumpro.data.model.obj;

import com.datavirtue.nevitiumpro.data.model.obj.IProjects;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasConnections;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasInvoices;
import com.datavirtue.nevitiumpro.data.model.obj.ProjectsHasQuotes;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: projects.
 * @author autogenerated
 */

@Entity
@Table(name = "projects", catalog = "NevitiumPro")
public class Projects implements Cloneable, Serializable, IPojoGenEntity, IProjects {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559029494L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Long actualEndDate;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String mission;
	/** Field mapping. */
	private String notes;
	/** Field mapping. */
	private Set<ProjectsHasConnections> projectsHasConnectionss = new HashSet<ProjectsHasConnections>();

	/** Field mapping. */
	private Set<ProjectsHasInvoices> projectsHasInvoiceses = new HashSet<ProjectsHasInvoices>();

	/** Field mapping. */
	private Set<ProjectsHasQuotes> projectsHasQuoteses = new HashSet<ProjectsHasQuotes>();

	/** Field mapping. */
	private Long startDate;
	/** Field mapping. */
	private Long targetDate;
	/** Field mapping. */
	private String title;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Projects() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Projects(Integer id) {
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Projects.class;
	}
 

    /**
     * Return the value associated with the column: actualEndDate.
	 * @return A Long object (this.actualEndDate)
	 */
	@Basic( optional = true )
	@Column( name = "actual_end_date"  )
	public Long getActualEndDate() {
		return this.actualEndDate;
		
	}
	

  
    /**  
     * Set the value related to the column: actualEndDate.
	 * @param actualEndDate the actualEndDate value you wish to set
	 */
	public void setActualEndDate(final Long actualEndDate) {
		this.actualEndDate = actualEndDate;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "projects_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: mission.
	 * @return A String object (this.mission)
	 */
	@Basic( optional = true )
	@Column( length = 32000  )
	public String getMission() {
		return this.mission;
		
	}
	

  
    /**  
     * Set the value related to the column: mission.
	 * @param mission the mission value you wish to set
	 */
	public void setMission(final String mission) {
		this.mission = mission;
	}

    /**
     * Return the value associated with the column: notes.
	 * @return A String object (this.notes)
	 */
	@Basic( optional = true )
	@Column( length = 65535  )
	public String getNotes() {
		return this.notes;
		
	}
	

  
    /**  
     * Set the value related to the column: notes.
	 * @param notes the notes value you wish to set
	 */
	public void setNotes(final String notes) {
		this.notes = notes;
	}

    /**
     * Return the value associated with the column: projectsHasConnections.
	 * @return A Set&lt;ProjectsHasConnections&gt; object (this.projectsHasConnections)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.projectsProjects"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "projects_id", nullable = false  )
	public Set<ProjectsHasConnections> getProjectsHasConnectionss() {
		return this.projectsHasConnectionss;
		
	}
	
	/**
	 * Adds a bi-directional link of type ProjectsHasConnections to the projectsHasConnectionss set.
	 * @param projectsHasConnections item to add
	 */
	public void addProjectsHasConnections(ProjectsHasConnections projectsHasConnections) {
		projectsHasConnections.getId().setProjectsProjects(this);
		this.projectsHasConnectionss.add(projectsHasConnections);
	}

  
    /**  
     * Set the value related to the column: projectsHasConnections.
	 * @param projectsHasConnections the projectsHasConnections value you wish to set
	 */
	public void setProjectsHasConnectionss(final Set<ProjectsHasConnections> projectsHasConnections) {
		this.projectsHasConnectionss = projectsHasConnections;
	}

    /**
     * Return the value associated with the column: projectsHasInvoices.
	 * @return A Set&lt;ProjectsHasInvoices&gt; object (this.projectsHasInvoices)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.projectsProjects"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "projects_id", nullable = false  )
	public Set<ProjectsHasInvoices> getProjectsHasInvoiceses() {
		return this.projectsHasInvoiceses;
		
	}
	
	/**
	 * Adds a bi-directional link of type ProjectsHasInvoices to the projectsHasInvoiceses set.
	 * @param projectsHasInvoices item to add
	 */
	public void addProjectsHasInvoices(ProjectsHasInvoices projectsHasInvoices) {
		projectsHasInvoices.getId().setProjectsProjects(this);
		this.projectsHasInvoiceses.add(projectsHasInvoices);
	}

  
    /**  
     * Set the value related to the column: projectsHasInvoices.
	 * @param projectsHasInvoices the projectsHasInvoices value you wish to set
	 */
	public void setProjectsHasInvoiceses(final Set<ProjectsHasInvoices> projectsHasInvoices) {
		this.projectsHasInvoiceses = projectsHasInvoices;
	}

    /**
     * Return the value associated with the column: projectsHasQuotes.
	 * @return A Set&lt;ProjectsHasQuotes&gt; object (this.projectsHasQuotes)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.projectsProjects"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "projects_id", nullable = false  )
	public Set<ProjectsHasQuotes> getProjectsHasQuoteses() {
		return this.projectsHasQuoteses;
		
	}
	
	/**
	 * Adds a bi-directional link of type ProjectsHasQuotes to the projectsHasQuoteses set.
	 * @param projectsHasQuotes item to add
	 */
	public void addProjectsHasQuotes(ProjectsHasQuotes projectsHasQuotes) {
		projectsHasQuotes.getId().setProjectsProjects(this);
		this.projectsHasQuoteses.add(projectsHasQuotes);
	}

  
    /**  
     * Set the value related to the column: projectsHasQuotes.
	 * @param projectsHasQuotes the projectsHasQuotes value you wish to set
	 */
	public void setProjectsHasQuoteses(final Set<ProjectsHasQuotes> projectsHasQuotes) {
		this.projectsHasQuoteses = projectsHasQuotes;
	}

    /**
     * Return the value associated with the column: startDate.
	 * @return A Long object (this.startDate)
	 */
	@Basic( optional = true )
	@Column( name = "start_date"  )
	public Long getStartDate() {
		return this.startDate;
		
	}
	

  
    /**  
     * Set the value related to the column: startDate.
	 * @param startDate the startDate value you wish to set
	 */
	public void setStartDate(final Long startDate) {
		this.startDate = startDate;
	}

    /**
     * Return the value associated with the column: targetDate.
	 * @return A Long object (this.targetDate)
	 */
	@Basic( optional = true )
	@Column( name = "target_date"  )
	public Long getTargetDate() {
		return this.targetDate;
		
	}
	

  
    /**  
     * Set the value related to the column: targetDate.
	 * @param targetDate the targetDate value you wish to set
	 */
	public void setTargetDate(final Long targetDate) {
		this.targetDate = targetDate;
	}

    /**
     * Return the value associated with the column: title.
	 * @return A String object (this.title)
	 */
	@Basic( optional = true )
	@Column( length = 100  )
	public String getTitle() {
		return this.title;
		
	}
	

  
    /**  
     * Set the value related to the column: title.
	 * @param title the title value you wish to set
	 */
	public void setTitle(final String title) {
		this.title = title;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Projects clone() throws CloneNotSupportedException {
		
        final Projects copy = (Projects)super.clone();

		copy.setActualEndDate(this.getActualEndDate());
		copy.setId(this.getId());
		copy.setMission(this.getMission());
		copy.setNotes(this.getNotes());
		if (this.getProjectsHasConnectionss() != null) {
			copy.getProjectsHasConnectionss().addAll(this.getProjectsHasConnectionss());
		}
		if (this.getProjectsHasInvoiceses() != null) {
			copy.getProjectsHasInvoiceses().addAll(this.getProjectsHasInvoiceses());
		}
		if (this.getProjectsHasQuoteses() != null) {
			copy.getProjectsHasQuoteses().addAll(this.getProjectsHasQuoteses());
		}
		copy.setStartDate(this.getStartDate());
		copy.setTargetDate(this.getTargetDate());
		copy.setTitle(this.getTitle());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("actualEndDate: " + this.getActualEndDate() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("mission: " + this.getMission() + ", ");
		sb.append("notes: " + this.getNotes() + ", ");
		sb.append("startDate: " + this.getStartDate() + ", ");
		sb.append("targetDate: " + this.getTargetDate() + ", ");
		sb.append("title: " + this.getTitle());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Projects that; 
		try {
			that = (Projects) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getActualEndDate() == null) && (that.getActualEndDate() == null)) || (getActualEndDate() != null && getActualEndDate().equals(that.getActualEndDate())));
		result = result && (((getMission() == null) && (that.getMission() == null)) || (getMission() != null && getMission().equals(that.getMission())));
		result = result && (((getNotes() == null) && (that.getNotes() == null)) || (getNotes() != null && getNotes().equals(that.getNotes())));
		result = result && (((getStartDate() == null) && (that.getStartDate() == null)) || (getStartDate() != null && getStartDate().equals(that.getStartDate())));
		result = result && (((getTargetDate() == null) && (that.getTargetDate() == null)) || (getTargetDate() != null && getTargetDate().equals(that.getTargetDate())));
		result = result && (((getTitle() == null) && (that.getTitle() == null)) || (getTitle() != null && getTitle().equals(that.getTitle())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
